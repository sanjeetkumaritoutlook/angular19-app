{
  "$schema": "https://raw.githubusercontent.com/JetBrains/web-types/master/schema/web-types.json",
  "description-markup": "markdown",
  "name": "fluid-stencil",
  "version": "1.0.1",
  "contributions": {
    "html": {
      "elements": [
        {
          "name": "fluid-accordion",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-accordion/fluid-accordion.tsx",
            "symbol": "FluidAccordion"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "disable-auto-close",
              "deprecated": false,
              "description": "Set to true to allow multiple panels to be open simultaneously.\nThe default is that only one panel can be open at a time.",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-accordion-panel",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-accordion/fluid-accordion-panel/fluid-accordion-panel.tsx",
            "symbol": "FluidAccordionPanel"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "panel-title",
              "deprecated": false,
              "description": "The title displayed in Accordion Panel's header.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "expanded",
              "deprecated": false,
              "description": "Should the Accordion Panel content be hidden on initial render?",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "_sibling-has-icon",
              "deprecated": false,
              "description": "",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "_icon-placeholder-size",
              "deprecated": false,
              "description": "",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-actions",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/deprecated/fluid-actions/fluid-actions.tsx",
            "symbol": "FluidActions"
          },
          "attributes": [],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-address-form",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/patterns/fluid-address-form/fluid-address-form.tsx",
            "symbol": "FluidAddressForm"
          },
          "attributes": [
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "disabled",
              "deprecated": false,
              "description": "If true, entire address form will be disabled.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "data-path",
              "deprecated": false,
              "description": "The path to the element value in the parent form.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "auto-validate-children",
              "deprecated": false,
              "description": "",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-alert",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-alert/fluid-alert.tsx",
            "symbol": "FluidAlert"
          },
          "attributes": [
            {
              "name": "identifier",
              "deprecated": false,
              "description": "When supplied, will be prepended on each inner element of the alert component in order\nto help facilitate",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "severity",
              "deprecated": false,
              "description": "Determines the Alert's color scheme & Icon based on its purpose.",
              "required": false,
              "default": "FluidSeverity.INFO",
              "priority": "high"
            },
            {
              "name": "visible",
              "deprecated": false,
              "description": "Whether the Alert is visible or hidden.",
              "required": false,
              "default": "true",
              "priority": "high"
            },
            {
              "name": "message",
              "deprecated": false,
              "description": "Message/content displayed within the Alert's body (accepts HTML).\nIf message Prop is undefined, Alert will render a \"message\" named slot.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "dismissible",
              "deprecated": false,
              "description": "When true, Alert will display a \"close\" button that will dismiss/\nhide the Alert when clicked. NOTE: only available for \"info\" &\n\"success\" severity levels (i.e. \"warning\" & \"error\" Alerts are NOT\ndismissible per UX standards).",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "timeout",
              "deprecated": false,
              "description": "How long after the alert renders should it stay on screen? (ms).",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "loading",
              "deprecated": false,
              "description": "When true, Alert will display a \"loading spinner\" Icon in place\nof the Icon associated with its \"severity\". NOTE: only available\nfor \"info\" or \"success\" severity levels (i.e. \"warning\" & \"error\"\nAlerts cannot display as \"loading\" per UX standards).",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "inline",
              "deprecated": false,
              "description": "If true, the Alert's width will be determined by its content\n(rather than expanding to 100% width of container).",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "remove-margin",
              "deprecated": false,
              "description": "If true, removes Alert's bottom margin.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "snackbar",
              "deprecated": false,
              "description": "When true, Alert will be displayed as a \"floating\" element (i.e.\nappears on top of page content) in the position specified by the\n\"position\" Prop. NOTE: use the \"width\" & \"position\" Props to\ncustomize the \"snackbar\" Alert's appearance, & use the \"timeout\"\nProp to automatically hide Alert after a specified time limit.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "position",
              "deprecated": false,
              "description": "When \"snackbar\" Prop is true, determines \"floating\" position of the\nAlert relative to the viewport. NOTE: this Prop ONLY applies to\n\"snackbar\" Alerts & will be ignored if \"snackbar\" Prop is false.",
              "required": false,
              "default": "FluidFloatingPosition.BOTTOM_CENTER",
              "priority": "high"
            },
            {
              "name": "z-index",
              "deprecated": false,
              "description": "Overrides default CSS z-index value for snackbar.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "width",
              "deprecated": true,
              "description": "DEPRECATED: \"width\" is now deprecated. \"snackbar\" Alerts\nare now responsive based on viewport size & \"message\" length.\nIf this Prop is used, Alert will NOT be responsive --\nWhen \"snackbar\" Prop is true, defines the Alert's width. NOTE:\nthis Prop ONLY applies to \"snackbar\" Alerts & will be ignored\nif \"snackbar\" Prop is false.",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [
            {
              "name": "message",
              "description": "Named slot for custom message/content (supports HTML). Only available if \"message\" Prop is NOT provided."
            },
            {
              "name": "icon",
              "description": "Named slot for custom icon. When provided, replaces Alert's default \"severity\" Icon"
            }
          ],
          "css": {}
        },
        {
          "name": "fluid-badge",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-badge/fluid-badge.tsx",
            "symbol": "FluidBadge"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "label",
              "deprecated": false,
              "description": "Text to be displayed within the Badge body.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "solid",
              "deprecated": false,
              "description": "If true, Badge will have a solid-color background. Otherwise, Badge\nwill have transparent background with color border & label. This Prop\ncan be used in combination with \"chip\" & \"indicator\" Props.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "chip",
              "deprecated": false,
              "description": "If true, Badge will be styled as a \"chip\" with larger size, increased\nfont size, & circular rounded edges. Aesthetics are similar to the\nGoogle Material Chip component.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "indicator",
              "deprecated": false,
              "description": "If true, Badge will be styled as an \"indicator\" for displaying a\nnumerical value, character marker, or status word (e.g. a number within a\nTree Menu menu item). NOTE: Badge should NOT be used as a standalone\ncomponent when this Prop is utilized. Indicator Badges should only be\nused as \"add-ons\" to indicate status or context, and should be displayed\nbeside label text or in the upper right-hand corner of a container.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "color",
              "deprecated": false,
              "description": "Primary color used for Badge border, label (when \"solid\" Prop is false),\n& background (when \"solid\" Prop is true).",
              "required": false,
              "default": "FluidColor.INFO",
              "priority": "high"
            },
            {
              "name": "block",
              "deprecated": false,
              "description": "If true, Badge will be rendered as a block-level element instead of\ninline-block.",
              "required": false,
              "default": "false",
              "priority": "high"
            }
          ],
          "slots": [
            {
              "name": "icon",
              "description": "before   Named Slot for icon displayed before Badge label. Only available if \"iconBefore\" Prop is NOT specified."
            },
            {
              "name": "icon",
              "description": "after   Named Slot for icon displayed after Badge label. Only available if \"iconAfter\" Prop is NOT specified."
            }
          ],
          "css": {}
        },
        {
          "name": "fluid-bar-chart",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-bar-chart/fluid-bar-chart.tsx",
            "symbol": "FluidBarChart"
          },
          "attributes": [
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?\nDefaults to 'default' since the theme is undefined even if the component loads",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "chart-id",
              "deprecated": false,
              "description": "A unique identifier for your chart canvas element\nUseful to specify for E2E, analytics, etc.\nDefaults to a unique 36 char string",
              "required": false,
              "default": "generateUniqueId()",
              "priority": "high"
            },
            {
              "name": "chart-title",
              "deprecated": false,
              "description": "Title for the chart",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "sub-title",
              "deprecated": false,
              "description": "Takes in a string that goes below the chart title\n(e.g. if you want some more data or context for your chart)",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "currency-symbol",
              "deprecated": false,
              "description": "Allows the user to pass in a unit of currency to prepend to to chart values\nDefaults to an empty string if undefined, should you wish to not have currency in your units",
              "required": false,
              "default": "''",
              "priority": "high"
            },
            {
              "name": "has-background",
              "deprecated": false,
              "description": "Lets the user decide if they want a background\nDefaults to false",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "label",
              "deprecated": false,
              "description": "Required. A label to describe the units of the data in the chart\nDefaults to a string",
              "required": false,
              "default": "'No label provided. What are your units?'",
              "priority": "high"
            },
            {
              "name": "bar-percentage",
              "deprecated": false,
              "description": "Percent (0-1) of the available width each bar should be within the category width.\n1.0 will take the whole category width and put the bars right next to each other",
              "required": false,
              "default": "0.9",
              "priority": "high"
            },
            {
              "name": "category-percentage",
              "deprecated": false,
              "description": "Percent (0-1) of the available width each category should be within the sample width",
              "required": false,
              "default": "0.8",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-breadcrumb",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-breadcrumb/fluid-breadcrumb.tsx",
            "symbol": "FluidBreadcrumb"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "home-label",
              "deprecated": false,
              "description": "Allows for passing a string to substitute the default text \"Home\" for\nthe home page or first element of the breadcrumb",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "home-link",
              "deprecated": false,
              "description": "Allows for passing a custom path to substitute the default root \"/\" for\nthe home page or first link of the breadcrumb",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-button",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-button/fluid-button.tsx",
            "symbol": "FluidButton"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "label",
              "deprecated": false,
              "description": "The label text displayed on the Button OR the \"aria-label\" applied\nto Icon-Only Buttons. NOTE: when using the \"icon\" Prop, you should\nstill provide a descriptive label to this Prop for accessibility.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "type",
              "deprecated": false,
              "description": "Sets the color & style of the Button. NOTE: \"primary\" Buttons should\nbe used very sparingly, & should only be used for the most important\nactions in the user's workflow (i.e. you should NOT have 2+ \"primary\"\nButtons side-by-side).",
              "required": false,
              "default": "FluidButtonType.PRIMARY",
              "priority": "high"
            },
            {
              "name": "color-scheme",
              "deprecated": false,
              "description": "NOTE: This Prop applies to Icon-Only Buttons (i.e. \"icon\" Prop) &\n\"type: ghost\" Buttons ONLY (it will be ignored for all other Button\ntypes). Sets color of Button's label text and/or embedded Icon to\n\"light\" or \"dark\" for increased contrast when displayed on a color\nbackground. For example, if your Button is displayed on a DARK BLUE\nbackground, set this Prop's value to \"light\" so that the label color\nwill be white (instead of the default blue). If your Button is\ndisplayed on a YELLOW background, set this Prop's value to \"dark\" so\nthat the label will be dark gray (instead of the default blue). Do\nNOT change this Prop's value if your Button is displayed on a WHITE\nbackground. See \"Examples\" tab for more info.",
              "required": false,
              "default": "FluidColorScheme.DEFAULT",
              "priority": "high"
            },
            {
              "name": "disabled",
              "deprecated": false,
              "description": "If true, Button will be disabled (i.e. adds 'disabled' attribute).",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "remove-margin",
              "deprecated": false,
              "description": "Removes ALL default margins (i.e. \"margin-right\" & \"margin-bottom\").",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "remove-horizontal-margin",
              "deprecated": false,
              "description": "Removes default right margin.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "remove-vertical-margin",
              "deprecated": false,
              "description": "Removes default bottom margin.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "popover-config",
              "deprecated": false,
              "description": "When provided, adds a Popover to Button that is displayed on :hover\n(e.g. display a message on disabled Button). Accepts either a\nstring or FluidPopoverConfig value - string value generates a simple\nPopover, while a FluidPopoverConfig value allows all Popover Props\nto be customized.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "small",
              "deprecated": false,
              "description": "When true, Button will be smaller than the default size.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "large",
              "deprecated": false,
              "description": "When true, Button will be larger than the default size.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "control-bar-position",
              "deprecated": false,
              "description": "If the button is part of a control bar, what position is it\nin? 'start' | 'middle' | 'end'",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "identifier",
              "deprecated": false,
              "description": "",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "aligned-with-form-element",
              "deprecated": false,
              "description": "When true, indicates that Button is adjacent to a form element &\nshould have the same height as the form field.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "inherit-icon-color",
              "deprecated": false,
              "description": "When true, indicates that Icon-Only Button should inherit its Icon\ncolor from the parent component / element.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "color",
              "deprecated": true,
              "description": "DEPRECATED: \"color\" is now deprecated. Instead, use the \"type\" Prop\n(same functionality, just a different naming convention) -- Sets the\ncolor & style of the Button.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "popover",
              "deprecated": true,
              "description": "DEPRECATED: \"popover\" is now deprecated (https://chromestatus.com/feature/5463833265045504).\nInstead, use the \"message\" property of the \"popoverConfig\" Prop. --\nIf provided, adds simple \"tooltip\" Popover to Button that is\ndisplayed on hover. Typically used to display a message when Button\nis disabled. NOTE: if you need to customize Popover's Props, use the\n\"popoverConfig\" Prop instead to access ALL of Popover's Props.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "popover-title",
              "deprecated": true,
              "description": "DEPRECATED: \"popoverTitle\" is now deprecated. Instead, use the\n\"header\" property of the \"popoverConfig\" Prop. -- Adds a title to the\nPopover. If undefined, Popover will show without a header section.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "popover-width",
              "deprecated": true,
              "description": "DEPRECATED: \"popoverWidth\" is now deprecated. Instead, use the\n\"width\" property of the \"PopoverConfig\" Prop. -- Specifies the maximum\nwidth of the Popover (in px).",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [
            {
              "name": "icon",
              "description": "before   Named slot for icon BEFORE the Button label. Only available if \"iconBefore\" Prop is NOT specified."
            },
            {
              "name": "icon",
              "description": "after   Named slot for icon AFTER the Button label. Only available if \"iconAfter\" Prop is NOT specified."
            },
            {
              "name": "icon",
              "description": "self   Named slot for an icon only Button."
            }
          ],
          "css": {}
        },
        {
          "name": "fluid-button-group",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-button-group/fluid-button-group.tsx",
            "symbol": "FluidButtonGroup"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "name",
              "deprecated": false,
              "description": "Name used to associate the individual options together as a group.\nIf Button Group is used as a form element, set to \"controlName\"\nof parent form field.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "selected-value",
              "deprecated": false,
              "description": "The current selected option's \"value\" property. Dynamically updated\nwhen the selected option changes. If provided, sets the option with\nmatching \"value\" property as selected. If provided value does NOT\nmatch any existing FluidOption objects in the \"options\" array OR is\n\"undefined\", REMOVES the selected option and DESELECTS all options in\nthe group. NOTE: the selected option can also be set via an\nindividual option's \"selected\" property.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "prevent-default",
              "deprecated": false,
              "description": "If true, all options will be unselected by default. If false,\nButton Group will automatically select the first non-disabled option\nin the \"options\" array IF no other selected option is defined (i.e.\nthe \"selectedLabel\" Prop, the \"selectedValue\" Prop, or an option\nwith \"selected: true\" will override this Prop's functionality).",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "disabled",
              "deprecated": false,
              "description": "Disables the entire Button Group if true. NOTE: individual option(s)\ncan be disabled via the FluidOption \"disabled\" property.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "option-button-type",
              "deprecated": false,
              "description": "Sets the aesthetic style of Button Group's options (see usage examples for details)",
              "required": false,
              "default": "FluidOptionButtonType.DEFAULT",
              "priority": "high"
            },
            {
              "name": "selected-label",
              "deprecated": true,
              "description": "DEPRECATED: \"selectedLabel\" is now deprecated. Instead, use\n\"selectedValue\" Prop. -- The current selected option's \"label\"\nproperty. Dynamically updated when the selected option changes. If\nprovided, sets the option with matching \"label\" property as selected.\nIf provided label does NOT match any existing FluidOption objects in\nthe \"options\" array OR is \"undefined\", REMOVES the selected option and\nDESELECTS all options in the group. NOTE: the selected option can\nalso be set via an individual option's \"selected\" property.",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-card",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-card/fluid-card.tsx",
            "symbol": "FluidCard"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "card-title",
              "deprecated": false,
              "description": "When provided, Card will render a header section that displays this Prop's\nvalue as the Card's title. NOTE: if this Prop is omitted, Card will NOT render\na header section, will NOT be collapsible, & will NOT display an action button\nor Badge.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "title-label",
              "deprecated": false,
              "description": "When provided, adds an optional label/prefix before the \"cardTitle\" text\nin Card's header & automatically makes the \"cardTitle\" text bold (see\nCard's usage examples for a demo). NOTE: \"cardTitle\" Prop is required\nfor this Prop to be functional.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "subtitle",
              "deprecated": false,
              "description": "When provided, displays an optional \"subtitle\" underneath the \"cardTitle\"\ntext in Card's header. Subtitle text will be smaller & lighter than\n\"cardTitle\" text, & is meant to provide additional context. NOTE:\n\"cardTitle\" Prop is required for this Prop to be functional.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "full-height",
              "deprecated": false,
              "description": "When true, Card will expand to be 100% of its parent container's height.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "border",
              "deprecated": false,
              "description": "Whether the Card has an outer border. Overrides theme-specific default.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "drop-shadow",
              "deprecated": false,
              "description": "Whether the Card has a drop shadow. Overrides theme-specific default.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "collapsible",
              "deprecated": false,
              "description": "When true, Card body will be collapsible. Card can be expanded/\ncollapsed by clicking the \"up/down chevron\" button, clicking the\nCard title, or changing the \"collapsed\" Prop value. NOTE: \"cardTitle\"\nProp is required for this Prop to be functional.",
              "required": false,
              "default": "true",
              "priority": "high"
            },
            {
              "name": "collapsed",
              "deprecated": false,
              "description": "Controls whether collapsible Card is currently expanded/collapsed.\nThis Prop can be used after initial load/render to dynamically expand\nor collapse Card. NOTE: \"collapsible\" Prop MUST be true AND \"cardTitle\"\nProp must be provided for this Prop to be functional.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "remove-content-padding",
              "deprecated": false,
              "description": "When true, Card body & \"action-set\" slot will NOT have internal\ntop/bottom/left/right padding.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "remove-vertical-content-padding",
              "deprecated": false,
              "description": "When true, Card body & \"action-set\" slot will NOT have internal\ntop/bottom padding.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "remove-header-border",
              "deprecated": false,
              "description": "When true, Card will NOT render a border beneath its header section.\nNOTE: \"cardTitle\" Prop is required for this Prop to be functional.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "remove-margin",
              "deprecated": false,
              "description": "When true, removes Card's default bottom margin.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "action-text",
              "deprecated": true,
              "description": "DEPRECATED: \"actionText\" is now deprecated. Instead, use the \"label\"\nproperty of the \"actionButtonConfig\" Prop. -- When defined, renders\nan \"action button\" in the Card header that displays this Prop's\nvalue as its label. By default, the \"action button\" will also\ndisplay an \"external link\" Icon next to the label - the Icon can\nbe customized using the \"actionIcon\" Prop.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "is-new",
              "deprecated": true,
              "description": "DEPRECATED: \"isNew\" is now deprecated. Instead, use the \"label\"\nproperty of the \"badgeConfig\" Prop. -- If the card houses something\nnew, such as a feature, or info, should we render a 'New!' Badge?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "refreshable",
              "deprecated": true,
              "description": "DEPRECATED: \"refreshable\" is now deprecated. Instead, add an\nIcon-Only FLUID Button with \"refresh\" Icon to Card's \"header\" slot.\n-- Indicates that Card has the ability to be refreshed - when true,\nCard will render a \"refresh button\" adjacent to the Card title.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "refresh-tooltip",
              "deprecated": true,
              "description": "DEPRECATED: \"refreshTooltip\" is now deprecated. Instead, add an\nIcon-Only FLUID Button with \"refresh\" Icon & \"popoverConfig\"\nto Card's \"header\" slot. -- If \"refreshable\" Prop is true, adds\nan optional Popover to the \"refresh button\" (i.e. this Prop sets\nthe Popover's \"message\" Prop value).",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "refresh-tooltip-placement",
              "deprecated": true,
              "description": "DEPRECATED: \"refreshTooltipPlacement\" is now deprecated. Popover's\nbuilt-in edge detection will prevent it from appearing offscreen,\nmaking this Prop unnecessary. -- If \"refreshable: true\", sets the\nembedded Popover's placement in relation to the \"refresh\" Icon.",
              "required": false,
              "default": "FluidAnchorPosition.TOP",
              "priority": "high"
            },
            {
              "name": "refreshing",
              "deprecated": true,
              "description": "DEPRECATED: \"refreshing\" is now deprecated. Instead,\nWhen true, indicates that the Card is currently refreshing (i.e. if\nthe calling component is refreshing, this should be true).",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "Content displayed within the Card body."
            },
            {
              "name": "header",
              "description": "Named slot for content/controls displayed within the Card's header. Only available if \"cardTitle\" Prop provided."
            },
            {
              "name": "action",
              "description": "set   Named slot for controls displayed below Card's body content (e.g. \"save\"/\"cancel\" buttons)."
            }
          ],
          "css": {}
        },
        {
          "name": "fluid-carousel",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-carousel/fluid-carousel.tsx",
            "symbol": "FluidCarousel"
          },
          "attributes": [
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "controls-on-hover",
              "deprecated": false,
              "description": "Controls will only be visible when hovering over the carousel",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "active-slide-id",
              "deprecated": false,
              "description": "Can be used to dynamically switch to a specific slide",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-code-block",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/tooling/fluid-code-block/fluid-code-block.tsx",
            "symbol": "FluidCodeBlock"
          },
          "attributes": [
            {
              "name": "code",
              "deprecated": false,
              "description": "The code snippet you want to highlight, as a string",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "no-container",
              "deprecated": false,
              "description": "If true will render without the default container (copy functionality)",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "type",
              "deprecated": false,
              "description": "The name of the language definition.\nCheck for the full list of supported languages here: https://prismjs.com/#supported-languages",
              "required": false,
              "default": "'js'",
              "priority": "high"
            },
            {
              "name": "inline-type",
              "deprecated": false,
              "description": "If you want to add a custom class name (CSS).\nThis will be only added when the noContainer property is set to true",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "copyable",
              "deprecated": false,
              "description": "If false the copy button will not be displayed",
              "required": false,
              "default": "true",
              "priority": "high"
            },
            {
              "name": "muted",
              "deprecated": false,
              "description": "If true the code will be in muted style",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "copy-message",
              "deprecated": false,
              "description": "Message to display in the fluid-alert when the contents have been copied to the clipboard.",
              "required": false,
              "default": "'Copied!'",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-combo-box",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-combo-box/fluid-combo-box.tsx",
            "symbol": "FluidComboBox"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "multi-select",
              "deprecated": false,
              "description": "If true, multiple options can be selected simultaneously. If false,\nonly one option can be selected at a time.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "allow-custom-input",
              "deprecated": false,
              "description": "Whether Combo Box will accept arbitrary input that is not included\nin the array of available options.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "sort-order",
              "deprecated": false,
              "description": "If specified, options will be displayed in ascending/descending order\nin the dropdown list rather than being displayed in the order they're\nspecified in the options Prop.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "control-name",
              "deprecated": false,
              "description": "A unique name for the field (usually the dataKey for any form using\nthe input element).",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "initial-value",
              "deprecated": false,
              "description": "Values of the option(s) that should be selected by default. If a\nstring is provided, it will be converted into a single-item array.\n*NOTE: default selected options can also be specified using the\n\"selected\" property of the FluidOptions provided to the \"options\" Prop.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "value",
              "deprecated": false,
              "description": "Combo Box's current value. This Prop is dynamically updated to\nreflect the form element's current state - it can be used as a\n\"synchronous\" alternative to the public async \"getValue()\" method.\nWhen provided on first load, this Prop will set Combo Box's default\nselected option. After the component has been rendered, changes to this Prop will\nupdate the form field's value (similar to \"setValue()\" method). NOTE:\n\"initialValue\" will override this Prop on first load if both Props\nare provided.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "label",
              "deprecated": false,
              "description": "If provided, a FLUID Form Label will be rendered above the Combo Box\nwith the specified string.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "label-text-overflow",
              "deprecated": false,
              "description": "Sets the Form Label's text overflow behavior. By default, overflowing\nlabel text will be truncated with ellipsis.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "supplementary-label",
              "deprecated": false,
              "description": "If provided, a supplementary muted label will be displayed after the\nprimary Form Label.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "placeholder",
              "deprecated": false,
              "description": "Optional placeholder text to display within Combo Box's <input>.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "disabled",
              "deprecated": false,
              "description": "If true, Combo Box's <input> & dropdown menu will be disabled.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "readonly",
              "deprecated": false,
              "description": "If true, Combo Box's <input> will be \"readonly\" & dropdown menu\nwill be disabled.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "help-text",
              "deprecated": false,
              "description": "If provided, Combo Box's Form Label will render a \"helptext\" icon\nwith attached Popover. To render a basic Popover with default\nProp values, simply provide the Popover's message as a string\nvalue to this Prop. To render a Popover with customized Props,\nprovide a FluidPopoverConfig object to this Prop with the \"message\"\nproperty set. For more information, please see Popover's API\ndocumentation.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "inline-field",
              "deprecated": false,
              "description": "Removes the form field's default bottom margin.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "allow-cancel",
              "deprecated": false,
              "description": "If true, displays a \"clear\" button that resets the form field when\nclicked. At least one option must be selected for button to be visible.\nButton is NOT displayed when field has \"required\" validation.",
              "required": false,
              "default": "true",
              "priority": "high"
            },
            {
              "name": "disable-auto-highlight",
              "deprecated": false,
              "description": "When true, default auto-highlight functionality is disabled\n(i.e. the first option in the dropdown list will NOT automatically\nbe highlighted for selection when menu opens & while typing).",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "dynamic-menu-width",
              "deprecated": false,
              "description": "When true, Combo Box's dropdown menu will dynamically expand its\nwidth based on the text content of its options (i.e. the menu's\nwidth is allowed to extend past the edge of the component). When\nfalse, the dropdown menu's width will match the overall width of\nthe component, regardless of the size of its options. NOTE: this\nProp is automatically enabled when Combo Box is used within FLUID Table.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "auto-focus",
              "deprecated": false,
              "description": "If true, this field will automatically have focus on page load.\nNote: only one form field should have \"autoFocus\" set to true\non a page. Multiple fields with \"autoFocus: true\" can/will cause\nunexpected behavior.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "empty-list-message",
              "deprecated": false,
              "description": "Message displayed when none of Combo Box's options match the\ncurrent user input (i.e. all options have been \"filtered out\"\nof the dropdown menu).",
              "required": false,
              "default": "'No Results'",
              "priority": "high"
            },
            {
              "name": "z-index",
              "deprecated": false,
              "description": "Overrides default CSS z-index value for dropdown menu.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "_standalone",
              "deprecated": false,
              "description": "",
              "required": false,
              "default": "true",
              "priority": "high"
            },
            {
              "name": "auto-validate-children",
              "deprecated": false,
              "description": "",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-component-configurator",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/tooling/fluid-component-configurator/fluid-component-configurator.tsx",
            "symbol": "FluidComponentConfigurator"
          },
          "attributes": [
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-component-preview",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/tooling/fluid-component-preview/fluid-component-preview.tsx",
            "symbol": "FluidComponentPreview"
          },
          "attributes": [
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "framework",
              "deprecated": false,
              "description": "",
              "required": false,
              "default": "'angular'",
              "priority": "high"
            },
            {
              "name": "config-expanded",
              "deprecated": false,
              "description": "",
              "required": false,
              "default": "true",
              "priority": "high"
            },
            {
              "name": "toggle-code-enabled",
              "deprecated": false,
              "description": "",
              "required": false,
              "default": "false",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-component-renderer",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/tooling/fluid-component-renderer/fluid-component-renderer.tsx",
            "symbol": "FluidComponentRenderer"
          },
          "attributes": [
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "refresh-on-change",
              "deprecated": false,
              "description": "",
              "required": false,
              "default": "false",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-component-template",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-component-template/fluid-component-template.tsx",
            "symbol": "FluidComponentTemplate"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "my-boolean-property",
              "deprecated": false,
              "description": "Example boolean Prop.\nhttps://stenciljs.com/docs/properties#boolean-props\nTODO: Remove before initial commit",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "my-string-property",
              "deprecated": false,
              "description": "Example string Prop with @Watch decorator. The @Watch decorator\nmonitors a Prop or State for changes, then automatically runs the\nmethod associated with it when a change occurs.\nhttps://stenciljs.com/docs/properties#string-props\nhttps://stenciljs.com/docs/reactive-data#the-watch-decorator-watch\nTODO: Remove before initial commit",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "TODO: Documentation for unnamed slot (if one exists). Components can only have 1 unnamed slot"
            },
            {
              "name": "slot",
              "description": "name   TODO: Documentation for named slot (if one exists). Components can have multiple named slots"
            }
          ],
          "css": {}
        },
        {
          "name": "fluid-component-template-lite",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-component-template-lite/fluid-component-template-lite.tsx",
            "symbol": "FluidComponentTemplateLite"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-confirmation-dialog",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-confirmation-dialog/fluid-confirmation-dialog.tsx",
            "symbol": "FluidConfirmationDialog"
          },
          "attributes": [
            {
              "name": "modal-title",
              "deprecated": false,
              "description": "Text to be displayed in Modal header title.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "open",
              "deprecated": false,
              "description": "Handles opening the modal",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "message",
              "deprecated": false,
              "description": "The message to show in the confirmation dialog",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "confirm-label",
              "deprecated": false,
              "description": "Custom label for the confirmation button",
              "required": false,
              "default": "'Confirm'",
              "priority": "high"
            },
            {
              "name": "cancel-label",
              "deprecated": false,
              "description": "Custom label for the cancel button",
              "required": false,
              "default": "'Cancel'",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-container",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-container/fluid-container.tsx",
            "symbol": "FluidContainer"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "Theme settings the component should use.",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "inline",
              "deprecated": false,
              "description": "If true, Container will render as inline-block element. If false,\nContainer will render as block element.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "width",
              "deprecated": false,
              "description": "The width of the Container. FluidSize values equate to preset\npercentages, decimal numbers between 0 and 1 equate to percent\nvalues, whole numbers greater than 1 equate to pixel values, and\nstrings are outputted directly as inline style values (NOTE: strings\nshould contain valid CSS units - i.e. 'px', '%', 'em', 'vw', etc.).",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "min-width",
              "deprecated": false,
              "description": "The minimum width of the Container. FluidSize values equate to preset\npercentages, decimal numbers between 0 and 1 equate to percent\nvalues, whole numbers greater than 1 equate to pixel values, and\nstrings are outputted directly as inline style values (NOTE: strings\nshould contain valid CSS units - i.e. 'px', '%', 'em', 'vw', etc.).",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "max-width",
              "deprecated": false,
              "description": "The maximum width of the Container. FluidSize values equate to preset\npercentages, decimal numbers between 0 and 1 equate to percent\nvalues, whole numbers greater than 1 equate to pixel values, and\nstrings are outputted directly as inline style values (NOTE: strings\nshould contain valid CSS units - i.e. 'px', '%', 'em', 'vw', etc.).",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "height",
              "deprecated": false,
              "description": "The height of the Container. FluidSize values equate to preset\npercentages, decimal numbers between 0 and 1 equate to percent\nvalues, whole numbers greater than 1 equate to pixel values, and\nstrings are outputted directly as inline style values (NOTE: strings\nshould contain valid CSS units - i.e. 'px', '%', 'em', 'vh', etc.).",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "min-height",
              "deprecated": false,
              "description": "The minimum height of the Container. FluidSize values equate to preset\npercentages, decimal numbers between 0 and 1 equate to percent\nvalues, whole numbers greater than 1 equate to pixel values, and\nstrings are outputted directly as inline style values (NOTE: strings\nshould contain valid CSS units - i.e. 'px', '%', 'em', 'vh', etc.).",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "max-height",
              "deprecated": false,
              "description": "The maximum height of the Container. FluidSize values equate to preset\npercentages, decimal numbers between 0 and 1 equate to percent\nvalues, whole numbers greater than 1 equate to pixel values, and\nstrings are outputted directly as inline style values (NOTE: strings\nshould contain valid CSS units - i.e. 'px', '%', 'em', 'vh', etc.).",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "overflow-x",
              "deprecated": false,
              "description": "How the Container should handle horizontal content overflow. NOTE: setting\nthis Prop to 'hidden' or 'scroll' WILL cause absolutely-position elements\n(e.g. FLUID Popover, FLUID Dropdown Button, etc.) that overflow the container\nbounds to be truncated.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "overflow-y",
              "deprecated": false,
              "description": "How the Container should handle vertical content overflow. NOTE: setting\nthis Prop to 'hidden' or 'scroll' WILL cause absolutely-position elements\n(e.g. FLUID Popover, FLUID Dropdown Button, etc.) that overflow the container\nbounds to be truncated.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "padding",
              "deprecated": false,
              "description": "Padding applied to the body of the Container. FluidSize values equate\nto preset pixel values, decimal numbers between 0 and 1 equate to percent\nvalues, whole numbers greater than 1 equate to pixel values, and\nstrings are outputted directly as inline style values (NOTE: strings\nshould contain valid CSS units - i.e. 'px', '%', 'em', 'vw', etc.). Strings\ncan contain CSS shorthand to set padding on individual sides of the Container\n(e.g. '1em 2em 3em 4em' would set 1em padding on Container top, 2em padding on\nContainer right, 3em padding on Container bottom, & 4em padding on Container left).",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "margin",
              "deprecated": false,
              "description": "Margin applied to Container element. FluidSize values equate to preset\npixel values, decimal numbers between -1 and 1 equate to negative/positive\npercent values, whole numbers less than -1 or greater than 1 equate to\nnegative/positive pixel values, and strings are outputted directly as inline style\nvalues (NOTE: strings should contain valid CSS units - i.e. 'px', '%', 'em', 'vw',\netc.). Strings can contain CSS shorthand to set margin on individual sides of the\nContainer (e.g. '1em 2em 3em 4em' would set 1em margin on Container top, 2em margin on\nContainer right, 3em margin on Container bottom, & 4em margin on Container left).",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "text-align",
              "deprecated": false,
              "description": "Alignment of text & content within the Container. This applies to text elements\n(i.e. 'p', 'span', 'fluid-text', etc.), inline elements, & inline-block elements.",
              "required": false,
              "default": "FluidAlignment.LEFT",
              "priority": "high"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "Content displayed within the Container"
            },
            {
              "name": "fixed",
              "description": "content top   Named slot for fixed/sticky content. Spans 100% width across the top of the Container"
            },
            {
              "name": "fixed",
              "description": "content bottom   Named slot for fixed/sticky content. Spans 100% width across the bottom of the Container"
            },
            {
              "name": "fixed",
              "description": "content left   Named slot for fixed/sticky content. Spans top to bottom on the left side of the Container"
            },
            {
              "name": "fixed",
              "description": "content right   Named slot for fixed/sticky content. Spans top to bottom on the right side of the Container"
            }
          ],
          "css": {}
        },
        {
          "name": "fluid-content",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-content/fluid-content.tsx",
            "symbol": "FluidContent"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "theme-variant",
              "deprecated": false,
              "description": "Sets the background color of the content container.",
              "required": false,
              "default": "FluidThemeVariant.DEFAULT",
              "priority": "high"
            },
            {
              "name": "main-instance",
              "deprecated": false,
              "description": "If true, signifies that component was implemented properly via FLUID Page.\nIf false, component was implemented incorrectly & console warning will\nbe displayed.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "has-sidebar",
              "deprecated": true,
              "description": "DEPRECATED: \"hasSidebar\" is now deprecated. The Prop is unnecessary,\nas FLUID Page handles hardware acceleration for Sidebar. -- Indicates\nthat FLUID Page contains one or more Sidebars. Enables hardware\nacceleration for Sidebar expand/collapse transitions.",
              "required": false,
              "default": "false",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-content-collapse",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-content-collapse/fluid-content-collapse.tsx",
            "symbol": "FluidContentCollapse"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "is-collapsed",
              "deprecated": false,
              "description": "Allows the user to setup the collapse state: true or false for collapse or expand",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "collapsed-height",
              "deprecated": false,
              "description": "Allows the user to set up the height when the element is collapsed, the height is in px",
              "required": false,
              "default": "200",
              "priority": "high"
            },
            {
              "name": "max-content-height",
              "deprecated": false,
              "description": "Allows the user to set up the height when the element is expanded, the height is in px\nIf allowDynamicHeight property is set to `true` this value will be ignored",
              "required": false,
              "default": "1000",
              "priority": "high"
            },
            {
              "name": "allow-dynamic-height",
              "deprecated": false,
              "description": "If allowDynamicHeight property is set to `true` the component automatically\nwill set the dynamic height based on their children's height.",
              "required": false,
              "default": "false",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-context-menu",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-context-menu/fluid-context-menu.tsx",
            "symbol": "FluidContextMenu"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "menu-id",
              "deprecated": false,
              "description": "Unique \"id\" attribute for the dropdown menu container.",
              "required": false,
              "default": "generateUniqueId()",
              "priority": "high"
            },
            {
              "name": "disabled",
              "deprecated": false,
              "description": "If true, menu will be disabled & \"trigger\" element will be inert.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "as-wrapper",
              "deprecated": false,
              "description": "Indicates that Context Menu \"trigger\" slot contains a clickable\n/ focusable element (e.g. FLUID Button). Prevents \"trigger\" slot\nwrapper from receiving \"double :focus\" via keyboard navigation.\nNOTE: if using FLUID Button for \"trigger\", make sure to set Prop\n\"removeMargin\" to true.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "outside-click-close",
              "deprecated": false,
              "description": "If Context Menu contains Toggles, enables \"click outside to close\"\nfunctionality & prevents default \"close\" button from rendering when\ntrue. If \"openOnHover\" is true, also allows Context Menu to close\nautomatically when mouse leaves the component bounds. NOTE:\nthis Prop is only necessary if Context Menu contains Toggles -\n\"click outside to close\" functionality is enabled by default when\nno Toggles exist.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "menu-alignment",
              "deprecated": false,
              "description": "Sets dropdown menu alignment with the \"trigger\" element (i.e. \"left\"\nwill align the left edge of the dropdown menu with left edge of the\n\"trigger\" element).",
              "required": false,
              "default": "FluidAlignment.LEFT",
              "priority": "high"
            },
            {
              "name": "absolute-position",
              "deprecated": false,
              "description": "Changes the dropdown menu's CSS \"position\" property from \"fixed\"\n(default) to \"absolute\". NOTE: if the dropdown menu isn't displaying\ncorrectly, try setting this Prop's value to \"true\".",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "menu-section-style",
              "deprecated": false,
              "description": "Determines how menu sections are displayed within the dropdown menu.\n\"stacked\" causes menu sections to cascade vertically (i.e. column\nlayout). \"inline\" displays menu sections side-by-side horizontally\n(i.e. row layout).",
              "required": false,
              "default": "FluidMenuSectionStyle.STACKED",
              "priority": "high"
            },
            {
              "name": "open-on-hover",
              "deprecated": false,
              "description": "When true, hovering over the \"trigger\" element will open the menu\nand moving the mouse out of the component's bounds will close it.\nNOTE: this Prop DISABLES click events on the \"trigger\" element (i.e.\nclicking the trigger will NOT open/close the menu), but does NOT\naffect keyboard events (i.e. \"enter\" or \"space\" WILL open the menu).",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "close-label",
              "deprecated": false,
              "description": "The label to use for the close button",
              "required": false,
              "default": "'Close'",
              "priority": "high"
            },
            {
              "name": "z-index",
              "deprecated": false,
              "description": "Overrides default CSS z-index value for dropdown menu.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "display-menu-actions",
              "deprecated": false,
              "description": "Usually, Context Menu's \"actions\" (i.e. \"close\" button) are NOT\ndisplayed when \"outsideClickClose\" is true. This Prop overrides\nthe default functionality to display the \"close\" button regardless\nof \"outsideClickClose\" value.",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "Default slot for \"trigger\" element (NOTE: if \"trigger\" element is a Button, set \"asWrapper\" Prop to true)"
            },
            {
              "name": "CUSTOM_SLOT_NAME",
              "description": "Custom named slot generated from \"slotName\" property (FluidContextMenuSection)"
            }
          ],
          "css": {}
        },
        {
          "name": "fluid-currency-field",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-currency-field/fluid-currency-field.tsx",
            "symbol": "FluidCurrencyField"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "control-name",
              "deprecated": false,
              "description": "A unique name for the field (usually the dataKey for any form using\nthe input element",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "label",
              "deprecated": false,
              "description": "A label to show with the input field (where applicable)",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "label-text-overflow",
              "deprecated": false,
              "description": "Sets the Form Label's text overflow behavior. By default, overflowing\nlabel text will be truncated with ellipsis.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "placeholder",
              "deprecated": false,
              "description": "Optional placeholder text to display within Currency Field's <input>.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "disabled",
              "deprecated": false,
              "description": "If true, Currency Field's <input> will be disabled.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "readonly",
              "deprecated": false,
              "description": "If true, Currency Field's <input> will be in a \"readonly\" state.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "initial-value",
              "deprecated": false,
              "description": "Sets the initial value of the currency field (prior to formatting\nto desired currency). NOTE: you do NOT need to add the currency\nsymbol yourself - you should only set the initial value as a number\n(e.g. 0.00 or 0). If you set the initial value to anything other\nthan a number, it will return NaN - this is expected behaviour where\nyou have configured Not a Number (NaN) as your initial value. However,\nto avoid displaying NaN to your users, the field will automatically\nreset the \"initalValue\" to an empty string & display a console warning\nin this scenario.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "value",
              "deprecated": false,
              "description": "What is the value of the field (where applicable)",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "type",
              "deprecated": false,
              "description": "The type of the input field",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "supplementary-label",
              "deprecated": false,
              "description": "A muted label to show after the main form label",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "help-text",
              "deprecated": false,
              "description": "If provided, Currency Field's Form Label will render a \"helptext\"\nicon with attached Popover. To render a basic Popover with default\nProp values, simply provide the Popover's message as a string\nvalue to this Prop. To render a Popover with customized Props,\nprovide a FluidPopoverConfig object to this Prop with the \"message\"\nproperty set. For more information, please see Popover's API\ndocumentation.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "currency-symbol",
              "deprecated": false,
              "description": "Provide the currency code for the chosen currency",
              "required": false,
              "default": "FluidCurrencyCode.USD",
              "priority": "high"
            },
            {
              "name": "currency-locale",
              "deprecated": false,
              "description": "If the chosen currency isn't natively supported by FLUID, provide the\nlocale to use in the formatting.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "show-currency",
              "deprecated": false,
              "description": "Set to false, if we want a currency field, but without a currency\nsymbol shown.",
              "required": false,
              "default": "true",
              "priority": "high"
            },
            {
              "name": "inline-field",
              "deprecated": false,
              "description": "If the field is an inline one, remove all margins so it sits\nnicely in its container.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "allow-cancel",
              "deprecated": false,
              "description": "If true, allows the clear icon to be shown for non-required fields",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "step",
              "deprecated": false,
              "description": "Allows the step increment/decrement to be configured.",
              "required": false,
              "default": "'.01'",
              "priority": "high"
            },
            {
              "name": "whole-only",
              "deprecated": false,
              "description": "When true, Currency Field's <input> will only show whole numbers\nwith zero decimal places. NOTE: the \"roundingMethod\" Prop determines\nhow the decimal values are rounded.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "rounding-method",
              "deprecated": false,
              "description": "If using the \"wholeOnly\" Prop, this Prop dictates how decimal values\nshould be rounded to the nearest whole number (e.g. round up or round\ndown). Defaults to always rounding down.",
              "required": false,
              "default": "FluidRoundingMethod.DEFAULT",
              "priority": "high"
            },
            {
              "name": "display-stepper-buttons",
              "deprecated": false,
              "description": "When the input has the numeric type: `type=number`, the stepper buttons are displayed.\nBy default, the value of this property is `true`.\n\nThis rule only will be applied on desktop devices, this rule will be ignored on mobile devices (Phones, Tablets).\nStepper buttons will not be displayed on mobile devices, this is the standard behavior.",
              "required": false,
              "default": "true",
              "priority": "high"
            },
            {
              "name": "auto-focus",
              "deprecated": false,
              "description": "If true, this field will automatically have focus on page load. Note: only one form field should have this\nautoFocus set to true on a page. If multiple fields have autoFocus = true, then there could be unexpected behaviour.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "update-strategy",
              "deprecated": false,
              "description": "Determines the updating strategy for the field;\n'input' - the field will update the element state on each change to its value.\n'blur' - the field will update the element state when the user leaves the field.",
              "required": false,
              "default": "FluidUpdateStrategy.INPUT",
              "priority": "high"
            },
            {
              "name": "short-hand-numbers",
              "deprecated": false,
              "description": "If true, this field will accept shorthand numbers as input",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "_standalone",
              "deprecated": false,
              "description": "",
              "required": false,
              "default": "true",
              "priority": "high"
            },
            {
              "name": "text-align",
              "deprecated": false,
              "description": "Sets <input> element text alignment. Used for editable Table cells.",
              "required": false,
              "default": "FluidAlignment.LEFT",
              "priority": "high"
            },
            {
              "name": "auto-validate-children",
              "deprecated": false,
              "description": "",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-data-layer",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-data-layer/fluid-data-layer.tsx",
            "symbol": "FluidDataLayer"
          },
          "attributes": [
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "disabled",
              "deprecated": false,
              "description": "True, if the data layer is not the active data layer on the page.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "trace-event-log",
              "deprecated": false,
              "description": "Determines if we output the events array to the data layer state updates.",
              "required": false,
              "default": "true",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-datepicker",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-datepicker/fluid-datepicker.tsx",
            "symbol": "FluidDatepicker"
          },
          "attributes": [
            {
              "name": "control-name",
              "deprecated": false,
              "description": "A unique name for the field (usually the dataKey for any form using\nthe input element",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "label",
              "deprecated": false,
              "description": "A label to show with the input field (where applicable)",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "label-text-overflow",
              "deprecated": false,
              "description": "Sets the Form Label's text overflow behavior. By default, overflowing\nlabel text will be truncated with ellipsis.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "help-text",
              "deprecated": false,
              "description": "HelpText can be `string` or `FluidPopoverConfig`.\nBecause the `helpText` property will render the `fluid-popover` component internally\nyou can use this parameter to hold the `fluid-popover` config values.\n\nAs `string` if present, renders a `helptext` icon next to the form label\nwith attached Popover that displays the provided string.\n\nAs `FluidPopoverConfig` Allows all `fluid-popover` configuration properties to use.\nTo know more about the `fluid-popover` config values,  please check the `fluid-popover` API documentation.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "placeholder",
              "deprecated": false,
              "description": "Optional placeholder to add to the field",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "disabled",
              "deprecated": false,
              "description": "Should the field be disabled or not",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "readonly",
              "deprecated": false,
              "description": "Should the field be readonly and have readonly\nstyles applied",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "initial-value",
              "deprecated": false,
              "description": "What is the initial value of the field (where applicable)",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "type",
              "deprecated": false,
              "description": "The type of the input field",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "supplementary-label",
              "deprecated": false,
              "description": "A muted label to show after the main form label",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "inline-field",
              "deprecated": false,
              "description": "If the field is an inline one, remove all margins so it sits\nnicely in its container.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "allow-cancel",
              "deprecated": false,
              "description": "If true, allows the clear icon to be shown for non-required fields",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "min-date",
              "deprecated": false,
              "description": "The earliest date to accept.\nIf the value entered into the element occurs beforehand, the element fails constraint validation.\nIf the value of the min attribute isn't a possible date string in the format `yyyy-mm-dd`, then the element has no minimum date value.",
              "required": false,
              "default": "''",
              "priority": "high"
            },
            {
              "name": "max-date",
              "deprecated": false,
              "description": "The latest date to accept.\nIf the value entered into the element occurs afterward, the element fails constraint validation.\nIf the value of the max attribute isn't a possible date string in the format `yyyy-mm-dd`, then the element has no maximum date value.\nBy default we are capping the year to 4 digits",
              "required": false,
              "default": "'9999-12-31'",
              "priority": "high"
            },
            {
              "name": "auto-focus",
              "deprecated": false,
              "description": "If true, this field will automatically have focus on page load. Note: only one form field should have this\nautoFocus set to true on a page. If multiple fields have autoFocus = true, then there could be unexpected behaviour.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "show-picker-on-click",
              "deprecated": false,
              "description": "If true, will display the calendar popup when the click event is trigger",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "update-strategy",
              "deprecated": false,
              "description": "Determines the updating strategy for the field;\n'change' - the field will update the element state on each change to its value.\n'blur' - the field will update the element state when the user leaves the field.",
              "required": false,
              "default": "FluidUpdateStrategy.INPUT",
              "priority": "high"
            },
            {
              "name": "_standalone",
              "deprecated": false,
              "description": "",
              "required": false,
              "default": "true",
              "priority": "high"
            },
            {
              "name": "auto-validate-children",
              "deprecated": false,
              "description": "",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-divider",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-divider/fluid-divider.tsx",
            "symbol": "FluidDivider"
          },
          "attributes": [
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "color",
              "deprecated": false,
              "description": "The CSS specified color of what the <hr/> element should be\nDefault to Liberty Dark Grey",
              "required": false,
              "default": "'#707070'",
              "priority": "high"
            },
            {
              "name": "width",
              "deprecated": false,
              "description": "How many pixels the <hr/> will be wide",
              "required": false,
              "default": "1",
              "priority": "high"
            },
            {
              "name": "border-style",
              "deprecated": false,
              "description": "The border-style sets the line style for the border.\n Default `solid`",
              "required": false,
              "default": "'solid'",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-dom-clipper",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-dom-clipper/fluid-dom-clipper.tsx",
            "symbol": "FluidDomClipper"
          },
          "attributes": [
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "image-name",
              "deprecated": false,
              "description": "Determines the name of the image when captured",
              "required": false,
              "default": "'fluid-captured-image'",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-drawer",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-drawer/fluid-drawer.tsx",
            "symbol": "FluidDrawer"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "visible",
              "deprecated": false,
              "description": "Whether the Drawer is open or closed. When true, Drawer will be open.\nWhen false, Drawer will be closed.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "anchor",
              "deprecated": false,
              "description": "Determines which side of the page that Drawer will be positioned.",
              "required": false,
              "default": "FluidAnchorPosition.LEFT",
              "priority": "high"
            },
            {
              "name": "size",
              "deprecated": false,
              "description": "Determines the Drawer's width (if anchor is left/right) or height\n(if anchor is top/bottom). Accepts FluidSize for t-shirt sizing, or\na number that equates to a percentage of the viewport width/height.\nFor example, if the anchor Prop is set to \"left\" & a value of 60\nis passed, the Drawer will be 60% of the viewport width.",
              "required": false,
              "default": "FluidSize.SMALL",
              "priority": "high"
            },
            {
              "name": "padding",
              "deprecated": false,
              "description": "Determines the size of the Drawer container's internal padding.\nAccepts all FluidSize values except for \"full\".",
              "required": false,
              "default": "FluidSize.SMALL",
              "priority": "high"
            },
            {
              "name": "outside-click-close",
              "deprecated": false,
              "description": "If true, the Drawer will close on a click anywhere outside of the\nmain Drawer container. If false, the \"dismiss\" button must be clicked\nto close the Drawer.",
              "required": false,
              "default": "true",
              "priority": "high"
            },
            {
              "name": "hide-close-icon",
              "deprecated": false,
              "description": "When true, removes drawers \"close\" button. NOTE: This should be used\nwith caution - if you haven't set up a way to close programmatically\nwith toggleDrawer(visible: boolean) on the instance OR enabled \"outsideClickClose\",\nyou won't be able to close the drawer!",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "disable-scroll",
              "deprecated": false,
              "description": "If true, background (page body) scrolling will be disabled when\nDrawer is open. If false, page can be scrolled in the background\nwhile Drawer is open.",
              "required": false,
              "default": "true",
              "priority": "high"
            },
            {
              "name": "z-index",
              "deprecated": false,
              "description": "Overrides default CSS z-index value for Drawer container.",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "Content displayed within the Drawer"
            }
          ],
          "css": {}
        },
        {
          "name": "fluid-dropdown-button",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-dropdown-button/fluid-dropdown-button.tsx",
            "symbol": "FluidDropdownButton"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "menu-id",
              "deprecated": false,
              "description": "Unique \"id\" attribute for the dropdown menu container.",
              "required": false,
              "default": "generateUniqueId()",
              "priority": "high"
            },
            {
              "name": "label",
              "deprecated": false,
              "description": "Text for the Button label.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "type",
              "deprecated": false,
              "description": "Sets the color & style of the Button.",
              "required": false,
              "default": "FluidButtonType.TERTIARY",
              "priority": "high"
            },
            {
              "name": "color-scheme",
              "deprecated": false,
              "description": "NOTE: This Prop applies to \"type: ghost\" Buttons ONLY & will be\nignored for all other Button types. Sets a Ghost Button's text color\nto \"light\" or \"dark\" for increased contrast when displayed on a color\nbackground. For example, if your Ghost Button is displayed on a DARK\nBLUE background, set this Prop's value to \"light\" so that the label\ncolor will be white (instead of the default blue). If your Ghost\nButton is displayed on a YELLOW background, set this Prop's value to\n\"dark\" so that the label will be dark gray (instead of the default\nblue). Do NOT change this Prop's value if your Ghost Button is\ndisplayed on a WHITE background. See FLUID Button's \"Examples\" tab\nfor more info.",
              "required": false,
              "default": "FluidColorScheme.DEFAULT",
              "priority": "high"
            },
            {
              "name": "open-on-hover",
              "deprecated": false,
              "description": "When true, hovering over the Button will open the dropdown menu\nand moving the mouse out of the component's bounds will close it.\nNOTE: this Prop DISABLES click events on the Button (i.e. clicking\nthe Button will NOT open/close the menu), but does NOT affect\nkeyboard events (i.e. \"enter\" or \"space\" WILL open the menu).",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "absolute-position",
              "deprecated": false,
              "description": "Changes the dropdown menu's CSS \"position\" property from \"fixed\"\n(default) to \"absolute\". NOTE: if the dropdown menu isn't displaying\ncorrectly, try setting this Prop's value to \"true\".",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "max-height",
              "deprecated": false,
              "description": "Sets a maximum height on the dropdown menu & allows vertical\nscrolling for content overflow. Accepts any string value that is\nvalid for CSS \"max-height\" property.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "disabled",
              "deprecated": false,
              "description": "When true, Button & dropdown menu will be disabled.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "remove-margin",
              "deprecated": false,
              "description": "Removes the Button's default right AND bottom margins.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "remove-horizontal-margin",
              "deprecated": false,
              "description": "Removes the Button's default right margin.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "remove-vertical-margin",
              "deprecated": false,
              "description": "Removes the Button's default bottom margin.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "z-index",
              "deprecated": false,
              "description": "Overrides default CSS z-index value for dropdown menu.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "color",
              "deprecated": true,
              "description": "DEPRECATED: \"color\" is now deprecated. Instead, use the \"type\" Prop\n(same functionality, just a different naming convention) -- Style\nsettings applied to the Button.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "icon",
              "deprecated": true,
              "description": "DEPRECATED: \"icon\" is now deprecated. Use \"iconBefore\" Prop instead.\nIf present, renders an Icon BEFORE the Button label (NOTE: \"iconAfter\"\nis automatically set to \"chevron\" Icon that indicates whether dropdown\nmenu is open or closed).",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [
            {
              "name": "icon",
              "description": "before   Named slot for icon displayed to the left of the Button's label"
            }
          ],
          "css": {}
        },
        {
          "name": "fluid-empty-state-container",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-empty-state-container/fluid-empty-state-container.tsx",
            "symbol": "FluidEmptyStateContainer"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "title-text",
              "deprecated": false,
              "description": "Configures the title text to use for the empty state notification.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "body-text",
              "deprecated": false,
              "description": "Configures the body text to use for the empty state notification.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "type",
              "deprecated": false,
              "description": "Configures where the empty state container is being used. If in a component,\ntitles, text and actions are centered, but for an empty page, they are\nleft aligned.",
              "required": false,
              "default": "FluidContainerElementType.COMPONENT",
              "priority": "high"
            },
            {
              "name": "theme-variant",
              "deprecated": false,
              "description": "Determins the background color of the container",
              "required": false,
              "default": "FluidThemeVariant.ATMOSPHERIC",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-faq",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-faq/fluid-faq.tsx",
            "symbol": "FluidFaq"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "question",
              "deprecated": false,
              "description": "The main FAQ question to render as a clickable area.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "answer",
              "deprecated": false,
              "description": "The answer to the question (contained within a content collapse)",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "collapsed",
              "deprecated": false,
              "description": "Should the answer be hidden on initial render (via fluid-content-collapse)",
              "required": false,
              "default": "true",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-file-upload",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-file-upload/fluid-file-upload.tsx",
            "symbol": "FluidFileUpload"
          },
          "attributes": [
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "accept-multiple",
              "deprecated": false,
              "description": "Whether the file upload should allow multiple files to be uploaded -\nif true, file list is displayed as a table beneath the drop zone.",
              "required": false,
              "default": "true",
              "priority": "high"
            },
            {
              "name": "supplementary-information",
              "deprecated": false,
              "description": "If there is any additional information to be displayed in the drop zone, such as maximum accepted\nfile size, or restrictions of filetype, use this property to provide it.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "show-file-list",
              "deprecated": false,
              "description": "If false, this will hide the table which displays the file list",
              "required": false,
              "default": "true",
              "priority": "high"
            },
            {
              "name": "restricted-file-type-message",
              "deprecated": false,
              "description": "Allows a custom message to be configured for the popover that is shown on the warning\nicon when a restricted file type has been attempted upload via drag and drop.",
              "required": false,
              "default": "INVALID_FILE_TYPE_UPLOADED",
              "priority": "high"
            },
            {
              "name": "actions-disabled",
              "deprecated": false,
              "description": "If true, all actions will be disabled, unless they are configured with an `enabledIf` property which\noverrides this propertyl.",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-focus-trap",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-focus-trap/fluid-focus-trap.tsx",
            "symbol": "FluidFocusTrap"
          },
          "attributes": [
            {
              "name": "enabled",
              "deprecated": false,
              "description": "Whether Focus Trap is actively trapping :focus. When true, :focus\nis automatically transferred to the Focus Trap (if :focus was\npreviously outside the root element). When false, Focus Trap will\nattempt to restore :focus to the element that previously had :focus\nbefore the trap was activated.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "disable-auto-activation",
              "deprecated": false,
              "description": "If true, prevents Focus Trap from enabling itself automatically when\none of its children receives :focus.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "auto-focus",
              "deprecated": false,
              "description": "When true, :focus will be automatically transferred to the root\nelement's first tabbable child (or child element set by\n\"setAutoFocusNode\") when Focus Trap is enabled. When false, :focus\nis transferred to the root element itself (default).",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-footer",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-footer/fluid-footer.tsx",
            "symbol": "FluidFooter"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "z-index",
              "deprecated": false,
              "description": "Overrides default CSS z-index value for sticky Footer.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "sticky",
              "deprecated": true,
              "description": "DEPRECATED: \"sticky\" is now deprecated. In general, website footers\nshould NOT have a \"fixed\" position within the viewport. If this Prop\nwas previously used as a workaround to ensure that Footer appears at\nthe bottom of the page, please remove it - the underlying issue that\ncaused Footer to be displayed above the bottom of the viewport has\nbeen fixed. -- Is the footer sticky / fixed?",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [
            {
              "name": "footer",
              "description": "actions   Named slot for site logo, navigation links, etc. that appears above \"footer content\" slot. Can be used with or without FLUID Footer Actions component."
            },
            {
              "name": "footer",
              "description": "content   Named slot for copyright, legal information, disclaimer, etc. that appears below \"footer actions\" slot. Can be used with or without FLUID Footer Content component."
            }
          ],
          "css": {}
        },
        {
          "name": "fluid-footer-actions",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-footer/fluid-footer-actions/fluid-footer-actions.tsx",
            "symbol": "FluidFooterActions"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-footer-content",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-footer/fluid-footer-content/fluid-footer-content.tsx",
            "symbol": "FluidFooterContent"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-form",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-form/fluid-form.tsx",
            "symbol": "FluidForm"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "disabled",
              "deprecated": false,
              "description": "If true, the entire form will be disabled, including actions. Please note, when this is\nset to true, using `setDisabled(false)` on the instance will NOT override. This prop takes\nprecedence over cache and instance methods.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "form-name",
              "deprecated": false,
              "description": "A unique name for the form, to be used as part of element IDs, etc",
              "required": false,
              "default": "generateUniqueId()",
              "priority": "high"
            },
            {
              "name": "layout",
              "deprecated": false,
              "description": "What layout should the form use.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "controls-alignment",
              "deprecated": false,
              "description": "Controls alignment of the submit/cancel buttons",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "show-grid-layout",
              "deprecated": false,
              "description": "If true, the grid layout will be colourised to aid debugging\n(NB: Will NOT be shown on non-local environment)",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "emit-on-render",
              "deprecated": false,
              "description": "If true, the form will get its state and emit it on first render",
              "required": false,
              "default": "true",
              "priority": "high"
            },
            {
              "name": "inline",
              "deprecated": false,
              "description": "If true, margin will be removed as form is inline with\nanother element",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "auto-validate-children",
              "deprecated": false,
              "description": "If true, anytime the parent form state changes, the children will\nauto force validation.",
              "required": false,
              "default": "false",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-form-array",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-form-array/fluid-form-array.tsx",
            "symbol": "FluidFormArray"
          },
          "attributes": [
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "disabled",
              "deprecated": false,
              "description": "Is the element disabled",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "initial-value",
              "deprecated": false,
              "description": "The initial value of the form array - if populated, editable table will be\npopulated, but master form will remain empty.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "disable-add-until-valid",
              "deprecated": false,
              "description": "If true, the add button will be disabled until the form array is valid.\nIf the form array is valid, but becomes invalid, the add button will disable\nuntil it becomes valid again.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "data-path",
              "deprecated": false,
              "description": "The path to the element value in the parent form.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "add-button-error-message",
              "deprecated": false,
              "description": "Displays as a popover on the add button when the inner form has errors to address.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "_standalone",
              "deprecated": false,
              "description": "",
              "required": false,
              "default": "true",
              "priority": "high"
            },
            {
              "name": "_update-strategy",
              "deprecated": false,
              "description": "",
              "required": false,
              "default": "FluidUpdateStrategy.INPUT",
              "priority": "high"
            },
            {
              "name": "auto-validate-children",
              "deprecated": false,
              "description": "",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-form-element",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-form-element/fluid-form-element.tsx",
            "symbol": "FluidFormElement"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "disabled",
              "deprecated": false,
              "description": "",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "auto-validate-children",
              "deprecated": false,
              "description": "",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-form-label",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-form-label/fluid-form-label.tsx",
            "symbol": "FluidFormLabel"
          },
          "attributes": [
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "supplementary-label",
              "deprecated": false,
              "description": "A muted label to show after the main form label",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "help-text",
              "deprecated": false,
              "description": "If provided, Form Label will render a \"helptext\" icon with attached\nPopover adjacent to its label. To render a basic Popover with default\nProp values, simply provide the Popover's message as a string\nvalue to this Prop. To render a Popover with customized Props,\nprovide a FluidPopoverConfig object to this Prop with the \"message\"\nproperty set. For more information, please see Popover's API\ndocumentation.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "label",
              "deprecated": false,
              "description": "A label to show with the input field (where applicable)",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "touched",
              "deprecated": false,
              "description": "Used by the form elements to tell the label if they've been touched or not.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "disabled",
              "deprecated": false,
              "description": "Whether the form element the label is attached to is disabled or not",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "text-overflow",
              "deprecated": false,
              "description": "Sets the text overflow behavior of the \"label\" Prop text.",
              "required": false,
              "default": "FluidTextOverflow.ELLIPSIS",
              "priority": "high"
            },
            {
              "name": "reset-position",
              "deprecated": false,
              "description": "Overrides default theme-specific positioning of Form Label container.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "inline-question",
              "deprecated": false,
              "description": "If true, will style the label as an inline question (so matching option labels)",
              "required": false,
              "default": "false",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-grid",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-grid/fluid-grid.tsx",
            "symbol": "FluidGrid"
          },
          "attributes": [
            {
              "name": "full-height",
              "deprecated": false,
              "description": "When true, Grid will expand vertically to fill 100% of parent\ncontainer height.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "inline",
              "deprecated": false,
              "description": "When true, Grid will display as \"inline-flex\" element.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "grid-item-spacing",
              "deprecated": false,
              "description": "Sets spacing/gap size between Grid Item children\n(xxs: 8px | xs: 16px | sm: 24px | md: 32px | lg: 48px | xl: 64px)",
              "required": false,
              "default": "FluidSize.EXTRA_SMALL",
              "priority": "high"
            },
            {
              "name": "remove-spacing",
              "deprecated": false,
              "description": "When true, removes default spacing between Grid Item children.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "justify",
              "deprecated": false,
              "description": "Sets horizontal alignment of Grid Item children. Only applicable\nwhen the sum of all Grid Item \"col-...\" values is less than 12 OR\n\"auto\" Prop is used & the width of all Grid Item children is less\nthan the total width of the parent Grid.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "align-items",
              "deprecated": false,
              "description": "Sets vertical alignment of Grid Item children. Only applicable if\nGrid Item children have uneven heights, or if parent Grid height is\ngreater than the height of its children.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "direction",
              "deprecated": false,
              "description": "Set the direction of the grid for how items are rendered in a\nhorizontal or vertical direction and if they are reversed or not.\nAccepts: 'row', 'row-reverse', 'column', 'column-reverse'.\nNOTE: Using this prop can result in unexpected behavior with other props.\nfor example, justify and alignItems are reversed when used with column.\nspacing, col breakpoints, and wrapping can also be affected.",
              "required": false,
              "default": "FluidFlexDirection.ROW",
              "priority": "high"
            },
            {
              "name": "gutter",
              "deprecated": true,
              "description": "DEPRECATED: \"gutter\" is now deprecated. Instead, use \"removeSpacing\"\nProp. -- Adds spacing between FluidGridItem children when true.",
              "required": false,
              "default": "true",
              "priority": "high"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "Grid Items displayed within the Grid. NOTE: slotted children MUST be FLUID Grid Items"
            }
          ],
          "css": {}
        },
        {
          "name": "fluid-grid-item",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-grid/fluid-grid-item/fluid-grid-item.tsx",
            "symbol": "FluidGridItem"
          },
          "attributes": [
            {
              "name": "col",
              "deprecated": false,
              "description": "Sets default column width at smallest mobile breakpoint size & up\n(viewport sizes: >0px). Accepts number value 1-12, \"auto\", or \"fill\".\nNOTE: when setting breakpoint sizes larger than \"colSm\", it's\nrecommended to ALWAYS set this Prop's value to 12 - this provides\na \"fallback\" value for smaller breakpoint sizes (otherwise, smaller\nbreakpoints will behave as if no \"col-...\" Prop is set).",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "col-sm",
              "deprecated": false,
              "description": "Sets column width at large mobile / small tablet breakpoint size & up\n(viewport sizes: ≥480px). Accepts number value 1-12, \"auto\", or \"fill\".",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "col-md",
              "deprecated": false,
              "description": "Sets column width at tablet / small desktop breakpoint size & up\n(viewport sizes: ≥768px). Accepts number value 1-12, \"auto\", or \"fill\".",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "col-lg",
              "deprecated": false,
              "description": "Sets column width at desktop breakpoint size & up\n(viewport sizes: ≥992px). Accepts number value 1-12, \"auto\", or \"fill\".",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "col-xl",
              "deprecated": false,
              "description": "Sets column width at large desktop breakpoint size & up\n(viewport sizes: ≥1200px). Accepts number value 1-12, \"auto\", or \"fill\".",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "auto",
              "deprecated": false,
              "description": "Sets column width automatically based on content width at ALL\nbreakpoint sizes (i.e. \"fluid\" column width - no pun intended 😏).\nTo use \"auto width\" at specific breakpoint sizes, set any of the\n\"col-...\" Props to \"auto\". NOTE: this Prop is overridden by any/\nall other \"col-...\" Props applied to the Grid Item, so it needs\nto be used independently of them to work correctly.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "align-self",
              "deprecated": false,
              "description": "Set vertical alignment for a single Grid Item within parent Grid.\nOverrides Grid parent's vertical alignment setting (i.e.\n\"alignItems\" Prop). NOTE: Grid Item's child(ren) MUST be shorter\nthan the height of the parent Grid for this Prop to work.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "order",
              "deprecated": false,
              "description": "When provided, changes default DOM order of the Grid Item within\nits Grid parent (i.e. sets flexbox \"order\" property). By default,\nall Grid Items have an order of 0 - changing this Prop to 1 will\ncause the Grid Item to be displayed AFTER other Grid Item siblings.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "pull-right",
              "deprecated": false,
              "description": "Right-justify a single Grid Item within parent Grid. Only applicable\nwhen sum of all GridItem \"col\" values is less than 12. Works best\nwhen parent Grid's \"justify\" Prop is \"start\".",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "pull-left",
              "deprecated": false,
              "description": "Left-justify a single Grid Item within parent Grid. Only applicable\nwhen sum of all GridItem \"col\" values is less than 12. Works best\nwhen parent Grid's \"justify\" Prop is \"end\".",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "align-items",
              "deprecated": false,
              "description": "Sets text alignment within Grid Item.",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "Content displayed within the Grid Item"
            }
          ],
          "css": {}
        },
        {
          "name": "fluid-header",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-header/fluid-header.tsx",
            "symbol": "FluidHeader"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "theme-palette",
              "deprecated": false,
              "description": "When provided, sets the current theme's color palette & appearance.\nNOTE: a theme palette acts as a \"style override\" applied ON TOP of\nthe current theme & isn't necessary for \"standard\" theme aesthetics.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "no-logo",
              "deprecated": false,
              "description": "When true, Header will NOT render a logo OR a logo slot.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "fixed-position",
              "deprecated": false,
              "description": "When true, Header will be \"sticky\" when scrolling (i.e. Header will\nhave a fixed position at the top of the viewport).",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "alignment",
              "deprecated": false,
              "description": "Sets alignment of links within Header container (at desktop size).\nAccepts \"left\", \"center\", or \"right\".",
              "required": false,
              "default": "FluidAlignment.LEFT",
              "priority": "high"
            },
            {
              "name": "hover-open-submenus",
              "deprecated": false,
              "description": "When true, Header submenus / mega menus will open on :hover (at\ndesktop size).",
              "required": false,
              "default": "true",
              "priority": "high"
            },
            {
              "name": "display-density",
              "deprecated": false,
              "description": "When 'compact', Header min-height is set to 60px and nav-label font-size is set to 1em (at desktop size).",
              "required": false,
              "default": "FluidDisplayDensity.DEFAULT",
              "priority": "high"
            },
            {
              "name": "fluid-logo",
              "deprecated": false,
              "description": "Causes Header to display FLUID logo instead of iUW or LM logos.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "z-index",
              "deprecated": false,
              "description": "Overrides default CSS z-index value for Header root & \"main\" container.",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [
            {
              "name": "header",
              "description": "logo   Named slot for custom logo. When provided, default logo will NOT be displayed.\nPreferred sizing: Aspect Ratio: 4:1 10:1 | Width: 175px 300px | Height: 20px 60px"
            },
            {
              "name": "header",
              "description": "search   Named slot for search bar / site search controls."
            },
            {
              "name": "header",
              "description": "content   Named slot for additional header content (i.e. links, menus, etc.)"
            }
          ],
          "css": {}
        },
        {
          "name": "fluid-header-actions",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-header/fluid-header-actions/fluid-header-actions.tsx",
            "symbol": "FluidHeaderActions"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "active",
              "deprecated": false,
              "description": "Is the header actions bar visible?",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-i18n-provider",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/providers/fluid-i18n-provider/fluid-i18n-provider.tsx",
            "symbol": "FluidI18nProvider"
          },
          "attributes": [
            {
              "name": "translations",
              "deprecated": false,
              "description": "",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "language",
              "deprecated": false,
              "description": "",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-icon",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-icon/fluid-icon.tsx",
            "symbol": "FluidIcon"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "icon-key",
              "deprecated": false,
              "description": "When provided, Icon will render an embedded SVG from FLUID's\nicon collection. NOTE: when this Prop is NOT provided, Icon\nwill render an unnamed slot for custom icons (e.g. SVGs, images,\nFont Awesome icons, etc.).",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "arialabel",
              "deprecated": false,
              "description": "Property to set the aria-label for accessibility compliance.\nNote: if the Icon is used as an \"indicator\" (i.e. it's used by itself), then arialabel must be provided for accessibility.\nHowever, if the Icon is used with another element that has a label OR is used within another component with a label, then arialabel should NOT be provided (i.e. the other element / component provides the necessary context)",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "slot-name",
              "deprecated": false,
              "description": "When this Prop is provided AND \"iconKey\" is NOT provided, Icon\nwill render a named slot instead of an embedded SVG. Slotted\nchildren (e.g. custom SVGs, images, Font Awesome icons, etc.) will\nneed to have the following attribute: slot=\"slotName\" (\"slotName\"\nshould be the value of this Prop). NOTE: this Prop should be used\nwhen providing custom slotted icons for menu items within Context\nMenu or Tree Menu.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "size",
              "deprecated": false,
              "description": "Limiting icon size to a predefined range to ensure consistency",
              "required": false,
              "default": "FluidSize.SMALL",
              "priority": "high"
            },
            {
              "name": "color",
              "deprecated": false,
              "description": "Sets \"fill\" color of Icon's embedded SVG. If this Prop is NOT provided,\nIcon will inherit the text color of its parent element by default.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "rotate",
              "deprecated": false,
              "description": "The icon will infinitely rotate while this value is true",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "flip-vertical",
              "deprecated": false,
              "description": "Flip the icon vertically, with animation, when this value is true",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "inline",
              "deprecated": false,
              "description": "Inlines an icon to the text beside it.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "scale",
              "deprecated": false,
              "description": "If we need to override the scaling down of an icon, use this prop. Scales\nare in multiples of 5 and correspond to a percentage reduction. If you find you\nneed to scale up, use the next size up and scale down accordingly.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "popover-config",
              "deprecated": false,
              "description": "When provided, adds a Popover to Icon that is displayed on :hover.\nAccepts either a string or FluidPopoverConfig value - string value\ngenerates a simple Popover, while a FluidPopoverConfig value allows\nall Popover Props to be customized.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "disabled",
              "deprecated": false,
              "description": "If the icon should be disabled for click/pointer events.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "interactive",
              "deprecated": false,
              "description": "If the icon does not have a popover or isn't a clickable icon, then cursor should be disabled.\nEnable this prop for clickable icons.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "popover-ignore-clipping-boundaries",
              "deprecated": false,
              "description": "If Icon has Popover, sets \"ignoreClippingBoundaries\" Prop value.",
              "required": false,
              "default": "true",
              "priority": "high"
            },
            {
              "name": "popover",
              "deprecated": true,
              "description": "DEPRECATED: \"popover\" is now deprecated (https://chromestatus.com/feature/5463833265045504).\nInstead, use the \"message\" property of the \"popoverConfig\" Prop. --\nIf provided, adds simple \"tooltip\" Popover to Icon that is\ndisplayed on hover. NOTE: if you need to customize Popover's\nProps, use the \"popoverConfig\" Prop instead to access ALL of\nPopover's Props.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "popover-persistable",
              "deprecated": true,
              "description": "DEPRECATED: \"popoverPersistable\" is now deprecated. Instead, use\nthe \"persistable\" property of the \"popoverConfig\" Prop. --\nWhen false, the Icon's Popover will NOT remain open when clicked.",
              "required": false,
              "default": "true",
              "priority": "high"
            },
            {
              "name": "popover-placement",
              "deprecated": true,
              "description": "DEPRECATED: \"popoverPlacement\" is now deprecated. Instead, use\nthe \"placement\" property of the \"popoverConfig\" Prop. --\nIf Popover exists, which side of the Icon should display the Popover?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "popover-width",
              "deprecated": true,
              "description": "DEPRECATED: \"popoverWidth\" is now deprecated. Instead, use\nthe \"width\" property of the \"popoverConfig\" Prop. --\nIf Popover exists, explicitly sets the Popover's maximum width.",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "Unnamed slot for custom external icon (only available if \"iconKey\" NOT provided)"
            },
            {
              "name": "CUSTOM_SLOT_NAME",
              "description": "Custom named slot generated from \"slotName\" property (only available if \"iconKey\" NOT provided)"
            }
          ],
          "css": {}
        },
        {
          "name": "fluid-image",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-image/fluid-image.tsx",
            "symbol": "FluidImage"
          },
          "attributes": [
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "src",
              "deprecated": false,
              "description": "The source of the image - corresponds to an HTML img src",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "width",
              "deprecated": false,
              "description": "The width for the image - if undefined, image will use its natural\nwidth - aspect ratio will be maintained.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "no-container",
              "deprecated": false,
              "description": "If true, there will be no container around the image",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "inline",
              "deprecated": false,
              "description": "If true, host element will be set to inline display",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "alt-text",
              "deprecated": false,
              "description": "Alt text for the image - if none set, the image is assumed to\ndecorative only, and the alt text will be set to empty string,\nper https://www.w3.org/WAI/tutorials/images/decorative/",
              "required": false,
              "default": "''",
              "priority": "high"
            },
            {
              "name": "enable-zoom-modal",
              "deprecated": false,
              "description": "If true, creates a hidden modal containing the image at full width, and\ndisplays a click to view larger icon to toggle the modal.",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-input-field",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-input-field/fluid-input-field.tsx",
            "symbol": "FluidInputField"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "control-name",
              "deprecated": false,
              "description": "A unique name for the field (usually the dataKey for any form using\nthe input element).",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "type",
              "deprecated": false,
              "description": "The form field's <input> \"type\" that dictates the \"value\" data format.",
              "required": false,
              "default": "FluidInputType.TEXT",
              "priority": "high"
            },
            {
              "name": "initial-value",
              "deprecated": false,
              "description": "Default value to be displayed within Input Field's <input> on first\nload. NOTE: this Prop is NOT dynamically updated after initial load\nlike the \"value\" Prop is, & cannot be used to update the form field's\nvalue after the first render.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "value",
              "deprecated": false,
              "description": "The Input Field's current value. This Prop is dynamically updated to\nreflect the form field's current state, so it can be used as a\n\"synchronous\" alternative to the public async \"getValue()\" method.\nIf provided on first load, populates the form field with a default\nvalue. After the component is rendered, changes to this Prop will\nupdate the form field's value (similar to \"setValue()\" method). NOTE:\n\"initialValue\" will override this Prop on first load if both Props\nare provided.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "update-strategy",
              "deprecated": false,
              "description": "Determines the updating strategy for the field;\n'input' - the field will update the element state on each change to its value.\n'blur' - the field will update the element state when the user leaves the field.",
              "required": false,
              "default": "FluidUpdateStrategy.INPUT",
              "priority": "high"
            },
            {
              "name": "label",
              "deprecated": false,
              "description": "If provided, a FLUID Form Label will be rendered above the Input\nField with the specified string.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "label-text-overflow",
              "deprecated": false,
              "description": "Sets the Form Label's text overflow behavior. By default, overflowing\nlabel text will be truncated with ellipsis.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "supplementary-label",
              "deprecated": false,
              "description": "If provided, a supplementary muted label will be displayed after the\nprimary Form Label.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "placeholder",
              "deprecated": false,
              "description": "Optional placeholder text to display within Input Field's <input>.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "disabled",
              "deprecated": false,
              "description": "If true, Input Field's <input> will be disabled.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "readonly",
              "deprecated": false,
              "description": "If true, Input Field's <input> will be in a \"readonly\" state.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "help-text",
              "deprecated": false,
              "description": "If provided, Input Field's Form Label will render a \"helptext\" icon\nwith attached Popover. To render a basic Popover with default\nProp values, simply provide the Popover's message as a string\nvalue to this Prop. To render a Popover with customized Props,\nprovide a FluidPopoverConfig object to this Prop with the \"message\"\nproperty set. For more information, please see Popover's API\ndocumentation.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "inline-field",
              "deprecated": false,
              "description": "Removes the form field's default bottom margin.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "allow-cancel",
              "deprecated": false,
              "description": "If true, displays a \"clear\" button that resets the form field when\nclicked. The field's <input> must have a value for button to be\nvisible. Button is NOT displayed when field has \"required\" validation.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "auto-focus",
              "deprecated": false,
              "description": "When true, this field will automatically have focus on page load.\nNote: only one form field should have \"autoFocus\" set to true\non a page. Multiple fields with \"autoFocus: true\" can/will cause\nunexpected behavior.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "max-length",
              "deprecated": false,
              "description": "Sets a maximum length (number of characters) allowed to be entered\nin the form field's <input>. NOTE: does not apply to number fields\n(i.e. \"type\" Prop is \"number\").",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "step",
              "deprecated": false,
              "description": "If a number field (i.e. \"type\" Prop is \"number\"), allows the \"step\"\nincrement/decrement to be configured.",
              "required": false,
              "default": "'any'",
              "priority": "high"
            },
            {
              "name": "display-stepper-buttons",
              "deprecated": false,
              "description": "If a number field (i.e. \"type\" Prop is \"number\"), controls whether\n\"stepper buttons\" (i.e. \"spin buttons\") are displayed on desktop\ndevices.",
              "required": false,
              "default": "true",
              "priority": "high"
            },
            {
              "name": "whole-only",
              "deprecated": false,
              "description": "If true and input field is of type number, the <input> will only show\nwhole numbers with zero decimal places. NOTE: the \"roundingMethod\"\nProp determines how the decimal values are rounded.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "rounding-method",
              "deprecated": false,
              "description": "If using the \"wholeOnly\" Prop, this Prop dictates how decimal values\nshould be rounded to the nearest whole number (e.g. round up or round\ndown). Defaults to always rounding down.",
              "required": false,
              "default": "FluidRoundingMethod.DEFAULT",
              "priority": "high"
            },
            {
              "name": "_standalone",
              "deprecated": false,
              "description": "",
              "required": false,
              "default": "true",
              "priority": "high"
            },
            {
              "name": "text-align",
              "deprecated": false,
              "description": "Sets <input> element text alignment. Used for editable Table cells.",
              "required": false,
              "default": "FluidAlignment.LEFT",
              "priority": "high"
            },
            {
              "name": "auto-validate-children",
              "deprecated": false,
              "description": "",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-label",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/deprecated/fluid-label/fluid-label.tsx",
            "symbol": "FluidLabel"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "label",
              "deprecated": false,
              "description": "What should the label display as its primary text",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "muted",
              "deprecated": false,
              "description": "Is the label a muted label",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "inline",
              "deprecated": false,
              "description": "Should the label be an inline label",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-line-chart",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-line-chart/fluid-line-chart.tsx",
            "symbol": "FluidLineChart"
          },
          "attributes": [
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "chart-id",
              "deprecated": false,
              "description": "A unique identifier for your chart canvas element\nUseful to specify for E2E, analytics, etc.\nDefaults to a unique 36 char string",
              "required": false,
              "default": "generateUniqueId()",
              "priority": "high"
            },
            {
              "name": "chart-title",
              "deprecated": false,
              "description": "Title for the chart",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "sub-title",
              "deprecated": false,
              "description": "Takes in a string that goes below the chart title\n(e.g. if you want some more data or context for your chart)",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "currency-symbol",
              "deprecated": false,
              "description": "Allows the user to pass in a unit of currency to prepend to to chart values\nDefaults to an empty string if undefined, should you wish to not have currency in your units",
              "required": false,
              "default": "''",
              "priority": "high"
            },
            {
              "name": "has-background",
              "deprecated": false,
              "description": "Lets the user decide if they want a background\nDefaults to false",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "label",
              "deprecated": false,
              "description": "Required. A label to describe the units of the data in the chart\nDefaults to a string",
              "required": false,
              "default": "'No label provided'",
              "priority": "high"
            },
            {
              "name": "has-legend",
              "deprecated": false,
              "description": "Lets the user decide if they want a legend",
              "required": false,
              "default": "true",
              "priority": "high"
            },
            {
              "name": "maintain-aspect-ratio",
              "deprecated": false,
              "description": "Allows the user to toggle the lock on the aspect ratio of the chart.\nUnlocking the aspect ratio will allow for the adjustment of width and height.\nDefaults to true (aspect ratio locked).",
              "required": false,
              "default": "true",
              "priority": "high"
            },
            {
              "name": "chart-height",
              "deprecated": false,
              "description": "Allows the user to set the height in pixels of the chart.\nNo effect unless maintainAspectRatio is false.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "chart-width",
              "deprecated": false,
              "description": "Allows the user to set the width in pixels of the chart. Adjusting this value will override the horizontal auto-resizing.\nCannot be adjusted without setting the chartHeight.\nNo effect unless maintainAspectRatio is false.",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-linear-progress",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-linear-progress/fluid-linear-progress.tsx",
            "symbol": "FluidLinearProgress"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "determinate",
              "deprecated": false,
              "description": "Determines whether Linear Progress is a determinate or indeterminate\nindicator. Linear Progress is indeterminate by default, which means\nthat it will NOT indicate wait time / time to completion (e.g.\nattempting to reconnect to a server). When this Prop is true, Linear\nProgress will be a determinate indicator, meaning that it WILL show\nprogress toward completion / how long a process will take to finish\n(e.g., downloading a file of a known size).",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "type",
              "deprecated": false,
              "description": "For determinate Linear Progress, sets the data format that the\ncurrent value should display.",
              "required": false,
              "default": "FluidProgressType.PERCENT",
              "priority": "high"
            },
            {
              "name": "value",
              "deprecated": false,
              "description": "For determinate Linear Progress, sets the current progress/completion\nstatus toward the \"max\" Prop value.",
              "required": false,
              "default": "0",
              "priority": "high"
            },
            {
              "name": "max",
              "deprecated": false,
              "description": "For determinate Linear Progress, sets the maximum value on the progress\nbar. When the \"value\" Prop equals the \"max\" Prop, the progress bar will\nbe shown as full/complete.",
              "required": false,
              "default": "100",
              "priority": "high"
            },
            {
              "name": "label",
              "deprecated": false,
              "description": "Optional descriptive title/label to be displayed above the progress bar.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "label-id",
              "deprecated": false,
              "description": "If \"label\" Prop is provided, overrides the label element's default \"id\"\nattribute value.",
              "required": false,
              "default": "generateUniqueId()",
              "priority": "high"
            },
            {
              "name": "weight",
              "deprecated": false,
              "description": "Sets the Linear Progress component's \"line weight\" (i.e. the height\n& thickness of the progress bar).",
              "required": false,
              "default": "FluidWeight.MEDIUM",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-link",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-link/fluid-link.tsx",
            "symbol": "FluidLink"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "href",
              "deprecated": false,
              "description": "NOTE: use this Prop INSTEAD OF \"route\" when Link should be a\nstandard <a> element (anchor tag) & navigation should NOT be\nhandled by the consuming application's router. Sets the URL to\nnavigate to when the Link is clicked.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "route",
              "deprecated": false,
              "description": "NOTE: use this Prop INSTEAD OF \"href\" when navigation should be\nhandled by the consuming application's router (i.e. equivalent to\nAngular's \"routerLink\" or React's <Link to=\"...\">). Sets the route\nto be emitted via the \"linkClicked\" Event when the Link is clicked.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "inline",
              "deprecated": false,
              "description": "When true, Link will be styled as an inline element with regular\nfont weight & an underline. When false (default), Link will be\nstyled as a \"standalone\" element (i.e. display: flex;) with bold\nfont weight & no underline (except on :hover). Inline styles\nshould be used for Links within text blocks or Tables.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "center",
              "deprecated": false,
              "description": "When true, Link will appear center-aligned within its container.\nNOTE: this Prop cannot be used when \"inline\" Prop is true.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "target",
              "deprecated": false,
              "description": "Specifies where to open the Link. \"_blank\" opens the link in a new\nwindow or tab. \"_self\" opens the link in the same frame as it was\nclicked (default). \"_parent\" opens the link in the parent frame.\n\"_top\" opens the link in the full body of the window.",
              "required": false,
              "default": "FluidLinkTarget.SELF",
              "priority": "high"
            },
            {
              "name": "disabled",
              "deprecated": false,
              "description": "When true, Link will be disabled.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "type",
              "deprecated": false,
              "description": "If Link is an email address or phone number, specifies the Link's\nbehavior when clicked. \"email\" will add a \"mailto:\" prefix to the\nLink's \"href\" attribute, & will open the user's native email client\nwhen clicked. \"tel\" will add a \"tel:\" prefix to the Link's \"href\"\nattribute, & will open the user's native phone or VoIP application\nwhen clicked. NOTE: this Prop MUST be used with the \"href\" Prop\n(NOT the \"route\" Prop).",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "color-scheme",
              "deprecated": false,
              "description": "Sets a Link's text color\nto \"light\" or \"dark\" for increased contrast when displayed on a color\nbackground. For example, if your Link is displayed on a DARK\nBLUE background, set this Prop's value to \"light\" so that the text\ncolor will be white (instead of the default blue). If your\nLink is displayed on a YELLOW background, set this Prop's value to\n\"dark\" so that the label will be dark gray (instead of the default\nblue). Do NOT change this Prop's value if your Link is\ndisplayed on a WHITE background.",
              "required": false,
              "default": "FluidColorScheme.DEFAULT",
              "priority": "high"
            },
            {
              "name": "link",
              "deprecated": true,
              "description": "DEPRECATED: \"link\" is now deprecated. Instead, use \"href\" Prop for\nstandard <a> tag functionality, or use \"route\" Prop for navigation\nhandled by the consuming application's router. -- The URL / route to\nnavigate to when the Link is clicked. When \"useNative\" Prop is TRUE,\nthis Prop's value must be a valid URL. When \"useNative\" Prop is FALSE,\nnavigation will NOT occur automatically & will need to be handled\nvia the consuming application's router.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "use-native",
              "deprecated": true,
              "description": "DEPRECATED: \"useNative\" is now deprecated. Instead, use \"href\"\nProp for standard <a> tag functionality, or use \"route\" Prop for\nnavigation handled by the consuming application's router. -- When\ntrue, Link will behave as a native HTML <a> tag and will direct the\nbrowser to the configured link (i.e. via \"href\" attr). Set to false\nto handle routing internally.",
              "required": false,
              "default": "true",
              "priority": "high"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "Text / content displayed within the Link's <a> tag"
            }
          ],
          "css": {}
        },
        {
          "name": "fluid-loading-skeleton",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-loading-skeleton/fluid-loading-skeleton.tsx",
            "symbol": "FluidLoadingSkeleton"
          },
          "attributes": [
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-loading-spinner",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-loading-spinner/fluid-loading-spinner.tsx",
            "symbol": "FluidLoadingSpinner"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "size",
              "deprecated": false,
              "description": "Sets the overall size of the Loading Spinner. Accepts all FluidSize\nvalues EXCEPT \"xxs\" & \"full\".",
              "required": false,
              "default": "FluidSize.MEDIUM",
              "priority": "high"
            },
            {
              "name": "circle-type",
              "deprecated": false,
              "description": "Sets the Loading Spinner's aesthetic style & animation behavior.",
              "required": false,
              "default": "FluidCircleTypes.NOTCHED",
              "priority": "high"
            },
            {
              "name": "centered",
              "deprecated": false,
              "description": "If true, Spinner will be horizontally centered within its container.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "vertical-padding",
              "deprecated": false,
              "description": "Sets top & bottom padding of Loading Spinner container. If provided,\noverrides default 1em top/bottom padding. FluidSize values equate\nto preset pixel values, decimal numbers between 0 and 1 equate to percent\nvalues, whole numbers greater than 1 equate to pixel values, and\nstrings are outputted directly as inline style values (NOTE: strings\nshould contain valid CSS units - i.e. 'px', '%', 'em', 'vh', etc.).",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "loading-message",
              "deprecated": false,
              "description": "If provided, displays a message string beneath the Loading Spinner.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "container",
              "deprecated": false,
              "description": "NOTE: this Prop MUST be used in conjunction with the \"loading\" Prop.\nWhen true, Loading Spinner will be rendered as a container for slotted\ncontent (i.e. enables Loading Spinner's slot). As long as the \"loading\"\nProp is true, the Spinner will be displayed on top of its slotted content\n& all child elements will be inaccessible. When the \"loading\" Prop is\nfalse (or undefined), the Spinner will be hidden & all slotted children\nwill be accessible (i.e. Loading Spinner becomes a standard <div>).",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "height",
              "deprecated": false,
              "description": "When loading spinner is used as a blocking container, us this prop to set\na minimum pixel height for the blocking spinner, so it can take up an\nappropriate amount of space on your page until whatever content you are loading\ncan be loaded.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "muted",
              "deprecated": false,
              "description": "If true, the loading spinner will be a smaller, more muted spinner. This is\nuseful for inline loading spinners, where the standard size and colour may be\ntoo much for the container.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "loading",
              "deprecated": false,
              "description": "When true, Spinner will be visible & slotted content will be blocked /\ninaccessible. When false, Spinner will NOT be displayed, & slotted child\nelements WILL be accessible (see \"container\" Prop documentation for more\ninfo). NOTE: if \"container\" Prop is FALSE, this Prop is OPTIONAL & will\nNOT affect the Spinner's visibility if undefined (i.e. Spinner will always\nbe visible until removed from the DOM). However, if \"container\" Prop is\nTRUE, this Prop is REQUIRED to display the Spinner (i.e. Spinner will\nNOT be visible if this Prop is left undefined).",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "spinner-id",
              "deprecated": false,
              "description": "Set a unique spinner ID. If there are multiple spinners on a single page,\nthis can be useful when dynamically toggling their loading state.",
              "required": false,
              "default": "generateUniqueId()",
              "priority": "high"
            },
            {
              "name": "z-index",
              "deprecated": false,
              "description": "Overrides default CSS z-index value for Loading Spinner container.",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "Content that is loading. All children of this slot will be inaccessible while \"loading\" Prop is true. NOTE: \"container\" Prop MUST be true to enable this slot. See documentation for \"container\" & \"loading\" Props for more information."
            }
          ],
          "css": {}
        },
        {
          "name": "fluid-modal",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-modal/fluid-modal.tsx",
            "symbol": "FluidModal"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "modal-title",
              "deprecated": false,
              "description": "Text to be displayed in Modal header title.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "size",
              "deprecated": false,
              "description": "Sets the size of the Modal container.",
              "required": false,
              "default": "FluidSize.MEDIUM",
              "priority": "high"
            },
            {
              "name": "open",
              "deprecated": false,
              "description": "Controls whether Modal is visible (true) or hidden (false).",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "transparent-overlay",
              "deprecated": false,
              "description": "When true, Modal's backdrop overlay will be transparent instead\nof translucent.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "outside-click-close",
              "deprecated": false,
              "description": "When true, clicking anywhere outside the Modal body container\n(i.e. anywhere on the backdrop overlay) will close it. NOTE: If\nyour Modal requires users to complete an action/task before close,\nyou should set this Prop to false.",
              "required": false,
              "default": "true",
              "priority": "high"
            },
            {
              "name": "actions-disabled",
              "deprecated": false,
              "description": "When true, all action buttons will be disabled EXCEPT for those\nwith \"enableOnModalDisabled\" property set to true. NOTE: If you need\na Modal to complete an action before closing, set this to true while\nthat action completes.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "should-disable-close",
              "deprecated": false,
              "description": "Disables Modal's \"close\" button IF this Prop is true AND\n\"actionsDisabled\" Prop is true as well (i.e. both Props must be true\nfor \"close\" button to be disabled).",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "hide-close-icon",
              "deprecated": false,
              "description": "When true, removes Modal's \"close\" button. NOTE: This should be used\nwith caution - if you haven't set up a \"close\" action button with\ncorresponding event listener OR enabled \"outsideClickClose\", you\nwon't be able to close the Modal!",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "limit-overflow",
              "deprecated": false,
              "description": "When TRUE, limits Modal's max-height to 70% & allows internal\nscrolling within the Modal's body, but also truncates any content\nthat overflows the edges of the Modal container (such as Popovers).\nWhen FALSE, Modal's height will be dictated by the height of its\ncontent, and content WILL be allowed to display outside the Modal\ncontainer edges without truncation (see usage examples).",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "disable-background-scroll",
              "deprecated": false,
              "description": "Whether to disable background page scrolling while Modal is open.\nIf false, page behind Modal will be allowed to scroll. NOTE: this\nProp SHOULD be enabled if possible for best user experience.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "disable-focus-trap",
              "deprecated": false,
              "description": "By default, Modal will \"trap\" :focus when open (i.e. Modal will\nprevent :focus from escaping its children via tab navigation).\nThis Prop will disable \"focus trap\" functionality when true.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "auto-focus",
              "deprecated": false,
              "description": "When true, Modal will automatically transfer :focus to the first\nchild element that can receive :focus when opened. NOTE: Modal\nmust have at least one slotted child element that can receive\n:focus for this Prop to function correctly.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "disable-top-document-i-frame-shift",
              "deprecated": false,
              "description": "When true, prevents Modal from promoting itself within the DOM\nto the top document level in an attempt to escape an <iframe>.\nThis default behavior is not desireable in some scenarios and\ncauses rendering issues.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "z-index",
              "deprecated": false,
              "description": "Overrides default CSS z-index value for Modal container.",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "Content displayed within the Modal"
            },
            {
              "name": "action",
              "description": "set   Named slot for Modal action buttons. Only available when \"modalActions\" Prop is NOT used"
            }
          ],
          "css": {}
        },
        {
          "name": "fluid-object-builder",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/tooling/fluid-object-builder/fluid-object-builder.tsx",
            "symbol": "FluidObjectBuilder"
          },
          "attributes": [
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-page",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-page/fluid-page.tsx",
            "symbol": "FluidPage"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "page-title",
              "deprecated": false,
              "description": "When provided, displays a title above slotted FLUID Page content.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "theme-variant",
              "deprecated": false,
              "description": "Sets page background color depending on variation chosen. NOTE: currently\nonly supports \"atmospheric white\" background color.",
              "required": false,
              "default": "FluidThemeVariant.DEFAULT",
              "priority": "high"
            },
            {
              "name": "has-sidebar",
              "deprecated": true,
              "description": "DEPRECATED: \"hasSidebar\" is now deprecated. Instead, use\n\"leftSidebarConfig\" or \"rightSidebarConfig\" Props. -- Renders left\nSidebar when true.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "sidebar-open",
              "deprecated": true,
              "description": "DEPRECATED: \"sidebarOpen\" is now deprecated. Instead, use\n\"leftSidebarConfig\" or \"rightSidebarConfig\" Prop with \"visible\"\nproperty set. -- Whether the left Sidebar should render as\nopen/expanded by default.",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "Content displayed within the page body"
            },
            {
              "name": "left",
              "description": "sidebar content   Named slot for left Sidebar content (only available if \"leftSidebarConfig\" Prop defined)"
            },
            {
              "name": "right",
              "description": "sidebar content   Named slot for right Sidebar content (only available if \"rightSidebarConfig\" Prop defined)"
            }
          ],
          "css": {}
        },
        {
          "name": "fluid-paginator",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-paginator/fluid-paginator.tsx",
            "symbol": "FluidPaginator"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "range-indicator-template",
              "deprecated": false,
              "description": "Allows custom range indicator wording to be rendered",
              "required": false,
              "default": "DEFAULT_RANGE_INDICATOR()",
              "priority": "high"
            },
            {
              "name": "items-per-page-template",
              "deprecated": false,
              "description": "Allows custom items per page wording to be rendered",
              "required": false,
              "default": "DEFAULT_ITEMS_PER_PAGE",
              "priority": "high"
            },
            {
              "name": "current-page",
              "deprecated": false,
              "description": "The page shown as \"selected\" by default on first render.\nNOTE: this number is a zero-based index (i.e. \"0\" is the first page).",
              "required": false,
              "default": "0",
              "priority": "high"
            },
            {
              "name": "show-first-button",
              "deprecated": false,
              "description": "If true, Paginator will display a \"jump to first page\" button\nbefore the \"previous page\" navigation button.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "show-last-button",
              "deprecated": false,
              "description": "If true, Paginator will display a \"jump to last page\" button\nafter the \"next page\" navigation button.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "is-total-items-disabled",
              "deprecated": false,
              "description": "If true the the total items (last item of the select box) will not be an option",
              "required": false,
              "default": "false",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-pie-chart",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-pie-chart/fluid-pie-chart.tsx",
            "symbol": "FluidPieChart"
          },
          "attributes": [
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "chart-id",
              "deprecated": false,
              "description": "A unique identifier for your chart canvas element\nUseful to specify for E2E, analytics, etc.\nDefaults to a unique 36 char string",
              "required": false,
              "default": "generateUniqueId()",
              "priority": "high"
            },
            {
              "name": "chart-title",
              "deprecated": false,
              "description": "Title for the chart",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "has-background",
              "deprecated": false,
              "description": "Lets the user decide if they want a background\nDefaults to false",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "has-data-labels",
              "deprecated": false,
              "description": "Lets the user decide if they want a label\nDefaults to true",
              "required": false,
              "default": "true",
              "priority": "high"
            },
            {
              "name": "legend-font-text-size",
              "deprecated": false,
              "description": "Lets the user decide the size of the legend text",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "legend-orientation",
              "deprecated": false,
              "description": "Lets the user decide the orientation of the legend",
              "required": false,
              "default": "'horizontal'",
              "priority": "high"
            },
            {
              "name": "has-legend",
              "deprecated": false,
              "description": "Lets the user decide if they want a legend",
              "required": false,
              "default": "true",
              "priority": "high"
            },
            {
              "name": "title-font-text-size",
              "deprecated": false,
              "description": "Lets the user decide the size of the title text",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "tooltip-font-text-size",
              "deprecated": false,
              "description": "Lets the user decide the size of the tooltip text",
              "required": false,
              "default": "TOOLTIP_BODY_FONT_SIZE",
              "priority": "high"
            },
            {
              "name": "chart-height",
              "deprecated": false,
              "description": "Lets the user decide the height of the chart",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "chart-width",
              "deprecated": false,
              "description": "Lets the user decide the width of the chart",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "chart-type",
              "deprecated": false,
              "description": "Allows the user to change the chart type to either pie (default)\nor donut;",
              "required": false,
              "default": "'pie'",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-popover",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-popover/fluid-popover.tsx",
            "symbol": "FluidPopover"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "header",
              "deprecated": false,
              "description": "Text for Popover header title. If provided, Popover will render a\n\"header\" section at the top of the Popover container. If omitted,\nPopover will NOT render a header section (similar to a tooltip).",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "placement",
              "deprecated": false,
              "description": "Preferred side of trigger element to anchor Popover container.\nWhen open, Popover will appear on the specified side UNLESS it's\nprojected to overflow a clipping boundary (i.e. it would appear\noffscreen or would be truncated by a parent container).",
              "required": false,
              "default": "FluidAnchorPosition.TOP",
              "priority": "high"
            },
            {
              "name": "width",
              "deprecated": false,
              "description": "Sets the Popover container's max-width (in px). If the total\nwidth of Popover's content is LESS than the value of this Prop,\nthe Popover container will automatically shrink to fit content width.",
              "required": false,
              "default": "320",
              "priority": "high"
            },
            {
              "name": "hover-open-delay",
              "deprecated": false,
              "description": "Sets delay (in ms) before Popover opens on hover. Prevents\naccidental opening on hover. Only applies to hover events.",
              "required": false,
              "default": "100",
              "priority": "high"
            },
            {
              "name": "hover-close-delay",
              "deprecated": false,
              "description": "Sets delay (in ms) before Popover closes when mouse leaves trigger.\nPrevents accidental close if hover state is interrupted. Only applies\nto hover events.",
              "required": false,
              "default": "400",
              "priority": "high"
            },
            {
              "name": "as-wrapper",
              "deprecated": false,
              "description": "Indicates that Popover's \"trigger\" slot contains a clickable\n/ focusable element (e.g. FLUID Button). When true, Popover\nwill NOT be persistable, will ONLY open on hover events\n(i.e. trigger clicks will NOT open the Popover), & will NOT\nallow :focus (however, the SLOTTED element CAN receive :focus).",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "open",
              "deprecated": false,
              "description": "Whether the Popover is visible (true) or hidden (false).",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "disable-interaction",
              "deprecated": false,
              "description": "If true, the popover will not allow any interaction on its\ntrigger other than hover (i.e, it will NOT be persistable).",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "message",
              "deprecated": false,
              "description": "Text displayed within the Popover container. NOTE: if this\nProp is provided, the \"content\" Slot will NOT be available.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "prevent-popover-opening",
              "deprecated": false,
              "description": "When true, Popover will NOT open on hover or click events\n(e.g. only open popover when a button is in a disabled state).",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "persistable",
              "deprecated": false,
              "description": "Allows Popover to remain open after hover event ends or trigger\nloses :focus (instead of closing after given delay). Clicking the\ntrigger element or Popover container will cause it to persist.",
              "required": false,
              "default": "true",
              "priority": "high"
            },
            {
              "name": "ignore-clipping-boundaries",
              "deprecated": false,
              "description": "When TRUE, Popover has \"position: fixed;\" & will only adjust its\nplacement and/or position to prevent its container from appearing\noffscreen. When FALSE, Popover has \"position: absolute\" & will\nadjust its placement and/or positioning to stay within the bounds\nof any parent container(s) that would truncate overflow (e.g.\nscrollable elements, elements with \"overflow: hidden;\" etc.). This\nProp should be TRUE for most implementations - however, setting it\nto false may help to improve performance.",
              "required": false,
              "default": "true",
              "priority": "high"
            },
            {
              "name": "z-index",
              "deprecated": false,
              "description": "Overrides default CSS z-index value for Popover container.",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [
            {
              "name": "trigger",
              "description": "Named slot for Popover's \"trigger\" element (i.e. opens Popover on hover/:focus/click)"
            },
            {
              "name": "content",
              "description": "Named slot for content displayed within Popover's container"
            }
          ],
          "css": {}
        },
        {
          "name": "fluid-radio-group",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-radio-group/fluid-radio-group.tsx",
            "symbol": "FluidRadioGroup"
          },
          "attributes": [
            {
              "name": "control-name",
              "deprecated": false,
              "description": "A unique name for the field (usually the dataKey for any form using\nthe input element",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "label",
              "deprecated": false,
              "description": "A label to show with the input field (where applicable)",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "label-text-overflow",
              "deprecated": false,
              "description": "Sets the Form Label's text overflow behavior. By default, overflowing\nlabel text will be truncated with ellipsis.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "placeholder",
              "deprecated": false,
              "description": "Optional placeholder to add to the field",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "disabled",
              "deprecated": false,
              "description": "Should the field be disabled or not",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "initial-value",
              "deprecated": false,
              "description": "Value of the option that should be selected by default on first load.\nNOTE: alternatively, you can also set the default selected option\nusing FluidOption's \"selected\" property in the \"options\" array.\nNo options will be selected if this Prop is undefined AND no\nFluidOptions in the \"options\" array have \"selected: true\".",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "supplementary-label",
              "deprecated": false,
              "description": "A muted label to show after the main form label",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "max-width-px",
              "deprecated": false,
              "description": "Allows maximum width (in px) to be set for the Radio Group.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "max-width-percent",
              "deprecated": false,
              "description": "Allows maximum width to be set for the Radio Group. Accepts an\ninteger (e.g. \"50\" will become 50%).",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "inline-field",
              "deprecated": false,
              "description": "If the field is an inline one, remove all margins so it sits\nnicely in its container.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "help-text",
              "deprecated": false,
              "description": "If provided, Radio Group's Form Label will render a \"helptext\" icon\nwith attached Popover. To render a basic Popover with default\nProp values, simply provide the Popover's message as a string\nvalue to this Prop. To render a Popover with customized Props,\nprovide a FluidPopoverConfig object to this Prop with the \"message\"\nproperty set. For more information, please see Popover's API\ndocumentation.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "inline-question",
              "deprecated": false,
              "description": "When true, Radio Group will have a \"questionnaire\" layout (i.e.\nthe Form Label will be rendered \"inline\" to the left of the radio\nbuttons). By default, the radio buttons will be displayed in a\nhorizontal list adjacent to the Form Label - however, this\nProp can be combined with the \"verticalLayout\" Prop to display\nthe radio buttons in a vertical list.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "question-width",
              "deprecated": false,
              "description": "If group is an inline question, allows you to configure the grid\nsize to use for the question label.",
              "required": false,
              "default": "6",
              "priority": "high"
            },
            {
              "name": "bordered",
              "deprecated": false,
              "description": "If true, the radio group option will be surrounded by a field border.\nThis should only be used where there are minimal options, and the\nfield is the middle of a grid form (where no borders would look out\nof place).",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "vertical-layout",
              "deprecated": false,
              "description": "If true, radio buttons will render vertically rather than horizontally.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "vertical-alignment",
              "deprecated": false,
              "description": "NOTE: BOTH \"inlineQuestion\" AND \"verticalLayout\" Props MUST be true for\nthis Prop to work correctly. Sets the vertical alignment of the Radio\nGroup's label in relation to the list of options (i.e. radio buttons).",
              "required": false,
              "default": "FluidFlexAlignment.CENTER",
              "priority": "high"
            },
            {
              "name": "selector-type",
              "deprecated": false,
              "description": "Determines how the Radio Group is rendered:\n'default' - Default HTML radio buttons\n'button' - FLUID Button Group",
              "required": false,
              "default": "FluidRadioSelectorType.DEFAULT",
              "priority": "high"
            },
            {
              "name": "auto-focus",
              "deprecated": false,
              "description": "If true, this field will automatically have focus on page load.\nNote: only one form field should have this autoFocus set to true\non a page. If multiple fields have autoFocus = true, then there\ncould be unexpected behaviour.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "_standalone",
              "deprecated": false,
              "description": "",
              "required": false,
              "default": "true",
              "priority": "high"
            },
            {
              "name": "auto-validate-children",
              "deprecated": false,
              "description": "",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-range-chart",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-range-chart/fluid-range-chart.tsx",
            "symbol": "FluidRangeChart"
          },
          "attributes": [
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "default-width",
              "deprecated": false,
              "description": "The property `Width` will be calculated dynamically,\nbased on the parent container of this component\nif the parent container width is 0 then the default will be used",
              "required": false,
              "default": "800",
              "priority": "high"
            },
            {
              "name": "currency-symbol",
              "deprecated": false,
              "description": "Allows the user to set the currency symbol",
              "required": false,
              "default": "FluidCurrencyCode.USD",
              "priority": "high"
            },
            {
              "name": "currency-locale",
              "deprecated": false,
              "description": "Allows the user to set the language code for the currency format",
              "required": false,
              "default": "'en-US'",
              "priority": "high"
            },
            {
              "name": "primary-background-color",
              "deprecated": false,
              "description": "Allows the user to set the background color for the primary pointer",
              "required": false,
              "default": "'#f8d047'",
              "priority": "high"
            },
            {
              "name": "primary-text-color",
              "deprecated": false,
              "description": "Allows the user to set the text color for the primary pointer",
              "required": false,
              "default": "'#000'",
              "priority": "high"
            },
            {
              "name": "secondary-background-color",
              "deprecated": false,
              "description": "Allows the user to set the background color for the secondary pointer",
              "required": false,
              "default": "'#4fa1ad'",
              "priority": "high"
            },
            {
              "name": "secondary-text-color",
              "deprecated": false,
              "description": "Allows the user to set the text color for the secondary pointer",
              "required": false,
              "default": "'#fff'",
              "priority": "high"
            },
            {
              "name": "default-background-color",
              "deprecated": false,
              "description": "Allows the user to set the background color for the standart pointer",
              "required": false,
              "default": "'#c0bfc0'",
              "priority": "high"
            },
            {
              "name": "default-text-color",
              "deprecated": false,
              "description": "Allows the user to set the text color for the standart pointer",
              "required": false,
              "default": "'#989898'",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-rating",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-rating/fluid-rating.tsx",
            "symbol": "FluidRating"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "control-name",
              "deprecated": false,
              "description": "A unique name for the field (usually the dataKey for any form using\nthe input element).",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "value",
              "deprecated": false,
              "description": "Sets the rating value (0 to 5)",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "label",
              "deprecated": false,
              "description": "If provided, a FLUID Form Label will be rendered above the Input\nField with the specified string.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "disabled",
              "deprecated": false,
              "description": "If true, the Rating will be disabled.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "readonly",
              "deprecated": false,
              "description": "If true, the Rating will be in a \"readonly\" state.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "inline-field",
              "deprecated": false,
              "description": "If the field is an inline one, remove all margins so it sits\nnicely in its container.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "initial-value",
              "deprecated": false,
              "description": "Default value on first load. NOTE: this Prop is NOT dynamically\nupdated after initial load like the \"value\" Prop is, & cannot\nbe used to update the form field's value after the first render.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "max",
              "deprecated": false,
              "description": "Sets the maximum possible value of the rating (default 5).",
              "required": false,
              "default": "5",
              "priority": "high"
            },
            {
              "name": "bordered",
              "deprecated": false,
              "description": "If true, the Rating input will be surrounded by a field border.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "allow-cancel",
              "deprecated": false,
              "description": "If true, displays a \"clear\" button that resets the form field when\nclicked. The field's <input> must have a value for button to be\nvisible. Button is NOT displayed when field has \"required\" validation.\nNOTE: \"bordered\" must be true for \"clear\" button to be visible.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "icon-size",
              "deprecated": false,
              "description": "This sets the icon size, default `md`.",
              "required": false,
              "default": "FluidSize.MEDIUM",
              "priority": "high"
            },
            {
              "name": "help-text",
              "deprecated": false,
              "description": "If provided, the Form Label will render a \"helptext\" icon\nwith attached Popover. To render a basic Popover with default\nProp values, simply provide the Popover's message as a string\nvalue to this Prop. To render a Popover with customized Props,\nprovide a FluidPopoverConfig object to this Prop with the \"message\"\nproperty set. For more information, please see Popover's API\ndocumentation.",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-search-box",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-search-box/fluid-search-box.tsx",
            "symbol": "FluidSearchBox"
          },
          "attributes": [
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "search-term",
              "deprecated": false,
              "description": "Allows the search term to be pre-populated (note: this is a mutable property\nso will change when the user types in the search box)",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-section-detail",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-section-detail/fluid-section-detail.tsx",
            "symbol": "FluidSectionDetail"
          },
          "attributes": [
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "section-title",
              "deprecated": false,
              "description": "The title for the section",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "title-level",
              "deprecated": false,
              "description": "The 'h' level for the section heading",
              "required": false,
              "default": "3",
              "priority": "high"
            },
            {
              "name": "disable-gutters",
              "deprecated": false,
              "description": "If true, no gutter will be applied to the bottom.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "info-popover",
              "deprecated": false,
              "description": "If the title should have an info icon with popover, provide the\npopover text with this prop",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-select",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-select/fluid-select.tsx",
            "symbol": "FluidSelect"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "control-name",
              "deprecated": false,
              "description": "A unique name for the field (usually the dataKey for any form using\nthe input element).",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "initial-value",
              "deprecated": false,
              "description": "The value of an option that should be selected by default. NOTE:\nthis Prop is NOT dynamically updated after initial load like the\n\"value\" Prop is, & cannot be used to access/update the form field's\nvalue after the first render. Alternatively, you can also set the\ndefault selected option using FluidOption's \"selected\" property\nin the \"options\" array.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "value",
              "deprecated": false,
              "description": "FLUID Select's current value. This Prop is dynamically updated to\nreflect the form field's current state, so it can be used as a\n\"synchronous\" alternative to the public async \"getValue()\" method.\nIf provided on first load, populates the form field with a default\nvalue. After the component is rendered, changes to this Prop will\nupdate the form field's value (similar to \"setValue()\" method). NOTE:\n\"initialValue\" will override this Prop on first load if both Props\nare provided.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "label",
              "deprecated": false,
              "description": "When provided, a FLUID Form Label will be rendered above the Select\nwith the specified string. NOTE: it is best practice for accessibility\nto provide a label.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "label-text-overflow",
              "deprecated": false,
              "description": "Sets the Form Label's text overflow behavior. By default, overflowing\nlabel text will be truncated with ellipsis.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "supplementary-label",
              "deprecated": false,
              "description": "When provided, a supplementary muted label will be displayed after\nthe primary Form Label.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "disabled",
              "deprecated": false,
              "description": "When true, Select's embedded <select> will be disabled.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "readonly",
              "deprecated": false,
              "description": "When true, Select's embedded <select> will be in a \"readonly\" state.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "placeholder",
              "deprecated": false,
              "description": "Placeholder text to display when no option is selected.",
              "required": false,
              "default": "'Choose Option'",
              "priority": "high"
            },
            {
              "name": "inline-field",
              "deprecated": false,
              "description": "When true, removes the form field's default bottom margin.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "allow-cancel",
              "deprecated": false,
              "description": "When true, displays a \"clear\" button that resets the form field when\nclicked. An option must be selected for the button to be visible.\nButton is NOT displayed when field has \"required\" validation.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "help-text",
              "deprecated": false,
              "description": "When provided, Select will render a \"helptext\" icon with attached\nPopover adjacent to its label. To render a basic Popover with default\nProp values, simply provide the Popover's message as a string\nvalue to this Prop. To render a Popover with customized Props,\nprovide a FluidPopoverConfig object to this Prop with the \"message\"\nproperty set. For more information, please see Popover's API\ndocumentation.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "auto-focus",
              "deprecated": false,
              "description": "When true, this field will automatically have focus on page load.\nNote: only one form field should have \"autoFocus\" set to true\non a page. Multiple fields with \"autoFocus: true\" can/will cause\nunexpected behavior.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "_standalone",
              "deprecated": false,
              "description": "",
              "required": false,
              "default": "true",
              "priority": "high"
            },
            {
              "name": "auto-validate-children",
              "deprecated": false,
              "description": "",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-sidebar",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-sidebar/fluid-sidebar.tsx",
            "symbol": "FluidSidebar"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "visible",
              "deprecated": false,
              "description": "Opens/expands the Sidebar when true, closes/collapses the Sidebar\nwhen false. NOTE: if \"collapsible\" Prop is false, this Prop should\nalways be true (unless Sidebar is configured to programmatically\nexpand & collapse via external logic).",
              "required": false,
              "default": "true",
              "priority": "high"
            },
            {
              "name": "fixed",
              "deprecated": false,
              "description": "When true, Sidebar will have a fixed (i.e. \"sticky\") position within\nthe DOM when scrolling. NOTE: it is recommended to ALWAYS set this\nProp to true, especially if the Sidebar is used for navigation.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "collapsible",
              "deprecated": false,
              "description": "Whether the Sidebar can be expanded / collapsed by the user. When\nfalse, Sidebar will ALWAYS be visible/open at desktop size & will NOT\ndisplay a toggle button. NOTE: at tablet / mobile size, Sidebar WILL\nbecome collapsible to save screen real estate (regardless of this\nProp's value).",
              "required": false,
              "default": "true",
              "priority": "high"
            },
            {
              "name": "anchor",
              "deprecated": false,
              "description": "Whether to render the Sidebar on the left or right side of the\nviewport. NOTE: this Prop is set automatically via FLUID Page (i.e.\nvalue inferred from use of \"leftSidebarConfig\" or \"rightSidebarConfig\"\nProp).",
              "required": false,
              "default": "FluidAnchorPosition.LEFT",
              "priority": "high"
            },
            {
              "name": "toggle-button-aria-label",
              "deprecated": false,
              "description": "",
              "required": false,
              "default": "'Toggle Sidebar'",
              "priority": "high"
            },
            {
              "name": "display-density",
              "deprecated": false,
              "description": "When 'compact', Sidebar width is set to 280px and embedded tree menu has its displayDensity prop set to compact. (at desktop size).",
              "required": false,
              "default": "FluidDisplayDensity.DEFAULT",
              "priority": "high"
            },
            {
              "name": "z-index",
              "deprecated": false,
              "description": "Overrides default CSS z-index value for Sidebar container.",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "Content displayed within the Sidebar body. NOTE: if built in Tree Menu is used (i.e. \"menuItems\" or \"treeMenuConfig\" Props), slotted content will be displayed BELOW the Tree Menu."
            }
          ],
          "css": {}
        },
        {
          "name": "fluid-stackedbar-horizontal",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-stackedbar-horizontal/fluid-stackedbar-horizontal.tsx",
            "symbol": "FluidStackedbarHorizontal"
          },
          "attributes": [
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "chart-id",
              "deprecated": false,
              "description": "A unique identifier for your chart canvas element\nUseful to specify for E2E, analytics, etc.\nDefaults to a unique 36 char string",
              "required": false,
              "default": "generateUniqueId()",
              "priority": "high"
            },
            {
              "name": "chart-title",
              "deprecated": false,
              "description": "Title for the chart",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "sub-title",
              "deprecated": false,
              "description": "Takes in a string that goes below the chart title\n(e.g. if you want some more data or context for your chart)",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "currency-symbol",
              "deprecated": false,
              "description": "Allows the user to pass in a unit of currency to prepend to to chart values\nDefaults to an empty string if undefined, should you wish to not have currency in your units",
              "required": false,
              "default": "''",
              "priority": "high"
            },
            {
              "name": "has-background",
              "deprecated": false,
              "description": "Lets the user decide if they want a background\nDefaults to false",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "label",
              "deprecated": false,
              "description": "Required. A label to describe the units of the data in the chart\nDefaults to a string",
              "required": false,
              "default": "'No label provided'",
              "priority": "high"
            },
            {
              "name": "legend-position",
              "deprecated": false,
              "description": "Allows the user to set the position of the legends",
              "required": false,
              "default": "FluidVerticalPosition.BOTTOM",
              "priority": "high"
            },
            {
              "name": "legend-orientation",
              "deprecated": false,
              "description": "Allows the user decide the orientation of the legend",
              "required": false,
              "default": "'horizontal'",
              "priority": "high"
            },
            {
              "name": "has-legend",
              "deprecated": false,
              "description": "Lets the user decide if they want a legend",
              "required": false,
              "default": "true",
              "priority": "high"
            },
            {
              "name": "bar-percentage",
              "deprecated": false,
              "description": "Percent (0-1) of the available width each bar should be within the category width.\n1.0 will take the whole category width and put the bars right next to each other",
              "required": false,
              "default": "0.9",
              "priority": "high"
            },
            {
              "name": "category-percentage",
              "deprecated": false,
              "description": "Percent (0-1) of the available width each category should be within the sample width",
              "required": false,
              "default": "0.8",
              "priority": "high"
            },
            {
              "name": "remove-section-labels",
              "deprecated": false,
              "description": "If true, the section label on the stacked bars will be removed",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-step",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-stepper/fluid-step/fluid-step.tsx",
            "symbol": "FluidStep"
          },
          "attributes": [
            {
              "name": "step-title",
              "deprecated": false,
              "description": "Optional alias for title attribute. Elements that implement a title attribute will cause some browsers\nto display a tooltip of the title on hover, which is great for accessibility, but not so when elements in\nthe card have their own popovers. Providing an alias is preferable to explicitly removing the title attribute\nfrom the attributes NamedNodeMap.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "active",
              "deprecated": false,
              "description": "If true the current step will be displayed.\nAt least one step needs to be active,\nif all steps are set as `active=false` the first step will be activated by default.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "status",
              "deprecated": false,
              "description": "Indicates the current status of the step",
              "required": false,
              "default": "FluidStepStatus.DEFAULT",
              "priority": "high"
            },
            {
              "name": "disabled",
              "deprecated": false,
              "description": "If true will disable the current step",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "step-hidden",
              "deprecated": false,
              "description": "If true the step will be hidden",
              "required": false,
              "default": "false",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-stepper",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-stepper/fluid-stepper.tsx",
            "symbol": "FluidStepper"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "disable-navigation-arrows",
              "deprecated": false,
              "description": "If true, tab navigation arrows will be disabled (not recommended unless you are making your\nusers aware that keyboard will be their only option)",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "non-linear",
              "deprecated": false,
              "description": "If set the Stepper will not assist in controlling steps for linear flow.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "step-label-position",
              "deprecated": false,
              "description": "If true, the step titles and step numbers will be displayed in a column instead of a row.",
              "required": false,
              "default": "FluidAnchorPosition.RIGHT",
              "priority": "high"
            },
            {
              "name": "actions-position",
              "deprecated": false,
              "description": "Set the stepper's footer (Back & Next buttons) position `top` or `bottom` default `bottom`",
              "required": false,
              "default": "FluidVerticalPosition.TOP",
              "priority": "high"
            },
            {
              "name": "align-steps",
              "deprecated": false,
              "description": "Where should the header buttons (step indicators) be aligned in their container",
              "required": false,
              "default": "FluidAlignment.CENTER",
              "priority": "high"
            },
            {
              "name": "step-width",
              "deprecated": false,
              "description": "Sets a specific width for all the Steps.\nConstraints:\n`Min value = 80;` values less than 80 will be set as false.\n`Max value = 300;` values greater than 300 will be set as 300 as the maximum value.\n Note: This value is ignored when the `stepLabelPosition` is set to `right`.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "hide-controls",
              "deprecated": false,
              "description": "If `true` Back, Next, Finish, and Reset buttons will not be displayed",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "show-finish-button",
              "deprecated": false,
              "description": "To display the final screen and reset flow this parameter is required to be true.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "complete-message",
              "deprecated": false,
              "description": "Set the message that will show after completing all the steps,  default: `All the steps are completed`",
              "required": false,
              "default": "'All the steps are complete'",
              "priority": "high"
            },
            {
              "name": "next-label",
              "deprecated": false,
              "description": "Label for the `Next` button",
              "required": false,
              "default": "'Next'",
              "priority": "high"
            },
            {
              "name": "back-label",
              "deprecated": false,
              "description": "Label for the `Back` button",
              "required": false,
              "default": "'Back'",
              "priority": "high"
            },
            {
              "name": "finish-label",
              "deprecated": false,
              "description": "Label for the `Finish` button",
              "required": false,
              "default": "'Finish'",
              "priority": "high"
            },
            {
              "name": "reset-label",
              "deprecated": false,
              "description": "Label for the `Reset` button",
              "required": false,
              "default": "'Reset'",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-sticky-button",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-sticky-button/fluid-sticky-button.tsx",
            "symbol": "FluidStickyButton"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "label",
              "deprecated": false,
              "description": "The label to give the button (if no ID is supplied, the label will\nbe automatically camelCased and used as an ID for accessibility &\ne2e testing).",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "type",
              "deprecated": false,
              "description": "Sets the color & style of the Button.",
              "required": false,
              "default": "FluidButtonType.PRIMARY",
              "priority": "high"
            },
            {
              "name": "remove-margin",
              "deprecated": false,
              "description": "When true, removes Sticky Button's default right & bottom margins.",
              "required": false,
              "default": "true",
              "priority": "high"
            },
            {
              "name": "remove-horizontal-margin",
              "deprecated": false,
              "description": "When true, removes Sticky Button's default right margin. NOTE:\nthis Prop is overridden by \"removeMargin\" Prop.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "remove-vertical-margin",
              "deprecated": false,
              "description": "When true, removes Sticky Button's default bottom margin. NOTE:\nthis Prop is overridden by \"removeMargin\" Prop.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "popover-config",
              "deprecated": false,
              "description": "When provided, displays a Popover on :hover when Sticky Button is\nDISABLED. NOTE: Popover will NOT be displayed on :hover UNLESS\ncomponent is disabled.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "small",
              "deprecated": false,
              "description": "When true, Sticky Button will be smaller than the default size.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "control-bar-position",
              "deprecated": false,
              "description": "If the button is part of a control bar, what position is it\nin? 'start' | 'middle' | 'end'",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "vertical-placement",
              "deprecated": false,
              "description": "Sets the Sticky Button's vertical offset (in px) from the top\nof the viewport.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "disabled",
              "deprecated": false,
              "description": "When true, Sticky Button will be disabled. Setting this Prop to\ntrue also allows the embedded Popover to be displayed on :hover\n(i.e. Popover is DISABLED when this Prop is false or undefined).",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "z-index",
              "deprecated": false,
              "description": "Overrides default CSS z-index value for Sticky Button container.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "color",
              "deprecated": true,
              "description": "DEPRECATED: \"color\" is now deprecated. Instead, use the \"type\" Prop\n(same functionality, just a different naming convention) -- Style\nsettings applied to the Button.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "popover",
              "deprecated": true,
              "description": "DEPRECATED: \"popover\" is now deprecated (https://chromestatus.com/feature/5463833265045504).\nInstead, use the \"message\" property of the \"popoverConfig\" Prop. --\nWhen provided, displays a Popover on :hover when Sticky Button is\nDISABLED. This Prop sets the \"message\" within the Popover. NOTE:\nPopover will NOT be displayed on :hover UNLESS component is disabled.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "popover-placement",
              "deprecated": true,
              "description": "DEPRECATED: \"popoverPlacement\" is now deprecated. Due to the\nplacement of Sticky Button within the viewport, the Popover's\nplacement should ALWAYS be \"top\". -- Sets preferred side of the\nSticky Button to display Popover (when open).",
              "required": false,
              "default": "FluidAnchorPosition.TOP",
              "priority": "high"
            },
            {
              "name": "popover-title",
              "deprecated": true,
              "description": "DEPRECATED: \"popoverTitle\" is now deprecated. Instead, use the\n\"header\" property of the \"popoverConfig\" Prop. -- Adds a title to the\nPopover. If undefined, Popover will show without a header section.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "popover-width",
              "deprecated": true,
              "description": "DEPRECATED: \"popoverWidth\" is now deprecated. Instead, use the\n\"width\" property of the \"PopoverConfig\" Prop. -- Specifies the maximum\nwidth of the Popover (in px).",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-tab",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-tabs/fluid-tab/fluid-tab.tsx",
            "symbol": "FluidTab"
          },
          "attributes": [
            {
              "name": "tab-title",
              "deprecated": false,
              "description": "Optional alias for title attribute. Elements that implement a title attribute will cause some browsers\nto display a tooltip of the title on hover, which is great for accessibility, but not so when elements in\nthe card have their own popovers. Providing an alias is preferable to explicitly removing the title attribute\nfrom the attributes NamedNodeMap.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "active",
              "deprecated": false,
              "description": "If true, Tab will be \"selected\" within parent Tabs component.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "disabled",
              "deprecated": false,
              "description": "Allows to disable the tab",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "hidden",
              "deprecated": false,
              "description": "If true the tab will be hidden",
              "required": false,
              "default": "false",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-tab-navigation",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-tabs/fluid-tab-navigation/fluid-tab-navigation.tsx",
            "symbol": "FluidTabNavigation"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "show-arrows",
              "deprecated": false,
              "description": "",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "scroll-position",
              "deprecated": false,
              "description": "",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "max-scroll-position",
              "deprecated": false,
              "description": "",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-table",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-table/fluid-table.tsx",
            "symbol": "FluidTable"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "table-id",
              "deprecated": false,
              "description": "A unique ID for the table",
              "required": false,
              "default": "generateUniqueId()",
              "priority": "high"
            },
            {
              "name": "enable-search",
              "deprecated": false,
              "description": "If true, the table will have a search bar",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "disable-active-filtering",
              "deprecated": false,
              "description": "If true, filters are only applied after clicking the 'Apply Filters' button\non the filter menu - this helps improve performance on large datasets.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "stateful",
              "deprecated": false,
              "description": "If the table is stateful, modifications to filters/visible columns/sorting etc.\nare stored locally to keep the table state on return visits (defaults to false);",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "expanded-button-position",
              "deprecated": false,
              "description": "Overrides default position of each row's \"expand\" button (rendered when\n\"expandableForm\" or \"expandableRowTemplate\" Props used). By default,\nthe \"expandableForm\" Prop will render the \"expand\" buttons on the LEFT side\nof the Table (e.g. \"right\" will override the default position). The\n\"expandableRowTemplate\" Prop will render the \"expand\" buttons on the\nRIGHT side of the Table by default (i.e. \"left\" will override the\ndefault position).",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "use-renderer",
              "deprecated": false,
              "description": "If an expandable form template is given, set this to true if your configuration returns\na FluidComponentDefinition and the table will use component renderer to render it.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "max-height",
              "deprecated": false,
              "description": "Sets a maximum height for the displayed table, if there is still visible data\nbeyond the maximum height, the table will become scrollable.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "min-height",
              "deprecated": false,
              "description": "",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "sticky-headers",
              "deprecated": false,
              "description": "When true, Table headers will be \"sticky\" on vertical scroll. NOTE:\nTable MUST have a maximum height defined (i.e. \"maxHeight\" Prop) for\nthis Prop to function.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "data-loading",
              "deprecated": false,
              "description": "Lets the table know if data from above is loading (from an API for example) so that\nit can show a loading spinner until it has the data (Must be managed from consuming\napplication)",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "refresh-delay",
              "deprecated": false,
              "description": "When the dataItems array is changed, the table enters a 'refresh' state - this is to ensure all the\noperations the table has to carry out on the new data set can complete before rendering the table nodes.\nThis value determines how long the table is in that refresh state, so it can be fine-tuned if there any\nissues with larger, or more complex datasets.",
              "required": false,
              "default": "300",
              "priority": "high"
            },
            {
              "name": "allow-overflow",
              "deprecated": false,
              "description": "If true, horizontal scrolling will be allowed on tables with many columns. NB - If allowOverflow is true,\nhorizontal scrolling will be enabled, however, filter menu style will be switched to compact to prevent overflow on the Y axis from cutting off the view.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "track-form-state",
              "deprecated": false,
              "description": "If true, the table emit the form state of each nested form for each change - if you do not need\nto know the forms state (validity, etc) prior to hitting the save button (and receiving mutations),\nyou can set this to false to improve performance.",
              "required": false,
              "default": "true",
              "priority": "high"
            },
            {
              "name": "striped",
              "deprecated": false,
              "description": "If true, Table rows will be styled with \"zebra stripes\" (alternating rows\nwill have gray background).",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "row-borders",
              "deprecated": false,
              "description": "If true, each Table row will have a bottom border.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "disable-column-visibility",
              "deprecated": false,
              "description": "If true, disables the column visibility filters",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "handle-delete",
              "deprecated": false,
              "description": "If true, the table will provide the ability to delete a row, without\nhaving to supplement with a defined action.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "commit-on-valid-save",
              "deprecated": false,
              "description": "If true (default), a table with an expandable form or editable field, and\ntable-rendered edit actions with automatically commit the changes to the forms\nto its own internal memory on click of the Save button if the forms are valid.\n\nThis will fire the dataMutated event, which lets the consuming application know\nthe new data set values.",
              "required": false,
              "default": "true",
              "priority": "high"
            },
            {
              "name": "validate-on-save",
              "deprecated": false,
              "description": "Where a table has nested forms or editable cells with validation configured, the table\nwill not emit a dataMutated event when the save button is clicked unless all are valid.\nWhen this prop is set to true, the table will validate the cells when save is clicked and\ncells are not valid, offering immediate visual feedback to the user.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "actions-disabled",
              "deprecated": false,
              "description": "If true, the save and cancel buttons will be disabled.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "row-identifier",
              "deprecated": false,
              "description": "If a particular property within the given dataItems can be used to uniquely\nidentify the item, this property tells the table to use it rather than generated\nIDs",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "disabled",
              "deprecated": false,
              "description": "When true, all interaction on the table will be disabled.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "paginated",
              "deprecated": false,
              "description": "Determines if the table is pageable - default is true, so needs\nto be explicitly set to false if we don't want pagination",
              "required": false,
              "default": "true",
              "priority": "high"
            },
            {
              "name": "range-indicator-template",
              "deprecated": false,
              "description": "Allows the paginators range indicator wording to be customised",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "items-per-page-template",
              "deprecated": false,
              "description": "Allows the paginators items per page selector wording to be customised",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "allow-tab-index-rows",
              "deprecated": false,
              "description": "",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "allow-tab-index-cells",
              "deprecated": false,
              "description": "",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "is-paginator-total-items-disabled",
              "deprecated": false,
              "description": "If true the total items of the paginator (last item of the select box) will not be an option",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "inline",
              "deprecated": false,
              "description": "If true, margin will be removed as form is inline with\nanother element",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "enable-delete-all",
              "deprecated": false,
              "description": "When this Prop is true AND handleDelete Prop is true, the \"delete\"\nicon rendered in the Table header will delete ALL rows in the Table.\nMainly used in File Upload component.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "server-mode",
              "deprecated": false,
              "description": "",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "show-edit-actions",
              "deprecated": true,
              "description": "",
              "required": false,
              "default": "true",
              "priority": "high"
            },
            {
              "name": "edit-actions-placement",
              "deprecated": true,
              "description": "",
              "required": false,
              "default": "FluidVerticalPosition.BOTTOM",
              "priority": "high"
            },
            {
              "name": "selectable",
              "deprecated": true,
              "description": "",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "selectable-header-label",
              "deprecated": true,
              "description": "",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "selectable-data-path",
              "deprecated": true,
              "description": "",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [
            {
              "name": "table",
              "description": "header row   A named slot to allow an additional header row to be applied at the head of the table;"
            }
          ],
          "css": {}
        },
        {
          "name": "fluid-tabs",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-tabs/fluid-tabs.tsx",
            "symbol": "FluidTabs"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "tab-can-change",
              "deprecated": false,
              "description": "If false, selected Tab cannot be changed & Tabs will appear disabled.",
              "required": false,
              "default": "true",
              "priority": "high"
            },
            {
              "name": "disable-navigation-arrows",
              "deprecated": false,
              "description": "If true, tab navigation arrows will be disabled (not recommended unless you are making your\nusers aware that keyboard will be their only option)",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "vertical-layout",
              "deprecated": false,
              "description": "If true, Tabs will render vertically rather than horizontally.",
              "required": false,
              "default": "false",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-text",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-text/fluid-text.tsx",
            "symbol": "FluidText"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "strong",
              "deprecated": false,
              "description": "When true, FLUID Text will render an embedded <strong> tag with bold\nfont weight that is displayed as an \"inline\" element (instead of the\ndefault <p> tag that is displayed as a \"block\" element). NOTE: this\nProp denotes that FLUID Text's content has strong importance,\nseriousness, or urgency.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "inline",
              "deprecated": false,
              "description": "When true, FLUID Text will be displayed as an \"inline-block\" element\n(instead of a \"block\" element) with right padding (for spacing\nbetween consecutive inline elements).",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "align-super",
              "deprecated": false,
              "description": "When true, applies \"super\" vertical alignment (i.e. superscript\nformat) to the text.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "block",
              "deprecated": false,
              "description": "When true, FLUID Text will be displayed as a \"block\" element. NOTE:\nthis Prop is only applicable when \"strong\" Prop is true (default\nFLUID Text renders an embedded <p> tag, which is already a \"block\"\nelement).",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "italics",
              "deprecated": false,
              "description": "When true, text will be italicized.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "center",
              "deprecated": false,
              "description": "When true, text will be center-aligned.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "muted",
              "deprecated": false,
              "description": "When true, text will be slightly smaller & will have a lighter color.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "disable-gutters",
              "deprecated": false,
              "description": "Removes default top & bottom margins when true.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "disable-padding",
              "deprecated": false,
              "description": "When true, removes right padding from inline FLUID Text. NOTE:\nthis Prop is only applicable when \"inline\" Prop is true (default\nFLUID Text has top/bottom margin instead of padding).",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "disable-gutter",
              "deprecated": false,
              "description": "Removes top OR bottom margin when provided. To remove both, use\n\"disableGutters\" Prop. Accepts \"top\" or \"bottom\".",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "color",
              "deprecated": false,
              "description": "Optional color for the text, otherwise, inherits from parent.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "align",
              "deprecated": false,
              "description": "Sets text alignment to left (default), right, or center.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "preserve-spacing",
              "deprecated": false,
              "description": "When true, sequences of white space will be preserved (including\ntabs), & lines will be broken at newline characters & <br> (i.e.\napplies \"white-space: pre-wrap\" CSS rule). This overrides the\ndefault behavior where newline characters, spaces, & tabs are\ncollapsed/removed.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "small",
              "deprecated": false,
              "description": "When true, font size will 12.5% smaller.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "break-word",
              "deprecated": false,
              "description": "When true, character strings that are normally \"unbreakable\" (such\nas long words or URLs) are allowed to be broken at arbitrary points if\nthere are no other acceptable break points in the line.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "text-overflow",
              "deprecated": false,
              "description": "Sets overflow behavior when text width is greater than the component's\nwidth. By default, FLUID Text will wrap overflowing content onto new\nline(s). Setting this Prop to \"clip\" will truncate text overflow\nmid-character, and \"ellipsis\" will truncate text overflow with \"...\"\n(NOTE: these values should only be used when seeing the entire text\nis NOT necessary to understand the content's context/purpose). Both\n\"clip\" & \"ellipsis\" values will display a tooltip on :hover containing\nthe full, unedited content.",
              "required": false,
              "default": "FluidTextOverflow.WRAP",
              "priority": "high"
            },
            {
              "name": "wrap",
              "deprecated": true,
              "description": "DEPRECATED: \"wrap\" is now deprecated. Instead, use \"preserveSpacing\"\nProp (same functionality, just a different naming convention) --\nWhen true, sequences of white space will be preserved (including\ntabs), & lines will be broken at newline characters & <br> (i.e.\napplies \"white-space: pre-wrap\" CSS rule). This overrides the\ndefault behavior where newline characters, spaces, & tabs are\ncollapsed/removed.",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "Text displayed within the component."
            }
          ],
          "css": {}
        },
        {
          "name": "fluid-text-area",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-text-area/fluid-text-area.tsx",
            "symbol": "FluidTextArea"
          },
          "attributes": [
            {
              "name": "control-name",
              "deprecated": false,
              "description": "A unique name for the field (usually the dataKey for any form using\nthe input element).",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "auto-resize",
              "deprecated": false,
              "description": "When true, Text Area will automatically resize itself so that its\nheight is equal to the height of its content.",
              "required": false,
              "default": "true",
              "priority": "high"
            },
            {
              "name": "label",
              "deprecated": false,
              "description": "If provided, a FLUID Form Label will be rendered above the Text\nArea with the specified string.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "label-text-overflow",
              "deprecated": false,
              "description": "Sets the Form Label's text overflow behavior. By default, overflowing\nlabel text will be truncated with ellipsis.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "placeholder",
              "deprecated": false,
              "description": "Optional placeholder text displayed when the form field is empty.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "inline-field",
              "deprecated": false,
              "description": "Removes the form field's default bottom margin when true.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "allow-cancel",
              "deprecated": false,
              "description": "If true, displays a \"clear\" button that resets the form field when\nclicked. Button is NOT displayed when field has \"required\" validation\nor is empty.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "initial-value",
              "deprecated": false,
              "description": "If provided, populates the form field with a default value. NOTE:\nthis Prop takes precedence over the \"value\" Prop.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "max-length",
              "deprecated": false,
              "description": "Sets a maximum length (number of characters) allowed to be entered\nin the text area. NOTE: does not apply to number fields\n(i.e. \"type\" Prop is \"number\").",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "disable-character-count",
              "deprecated": false,
              "description": "If true, character count will be disabled, even if maxLength is defined (note: maxLength\nwill still be respected)",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "value",
              "deprecated": false,
              "description": "The Text Area's current value. This Prop is dynamically updated to\nreflect the form field's current state, so it can be used as a\n\"synchronous\" alternative to the public async \"getValue()\" method.\nIf provided on first load, populates the form field with a default\nvalue. After the component is rendered, changes to this Prop will\nupdate the form field's value (similar to \"setValue()\" method). NOTE:\n\"initialValue\" will override this Prop on first load if both Props\nare provided.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "disabled",
              "deprecated": false,
              "description": "If true, Text Area will be disabled & will not allow user input.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "readonly",
              "deprecated": false,
              "description": "If true, Text Area will not be mutable (i.e. user cannot edit the\nform field's value). However, the form field will still allow :focus &\ntext selection.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "supplementary-label",
              "deprecated": false,
              "description": "If provided, a secondary muted label will be displayed to the right\nof the primary Form Label.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "rows",
              "deprecated": false,
              "description": "The default height of the Text Area, where each \"row\" is equal to\none line of text.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "help-text",
              "deprecated": false,
              "description": "If provided, Text Area's Form Label will render a \"helptext\" icon\nwith attached Popover. To render a basic Popover with default\nProp values, simply provide the Popover's message as a string\nvalue to this Prop. To render a Popover with customized Props,\nprovide a FluidPopoverConfig object to this Prop with the \"message\"\nproperty set. For more information, please see Popover's API\ndocumentation.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "auto-focus",
              "deprecated": false,
              "description": "Then true, this field will automatically have focus on page load.\nNote: only one form field should have \"autoFocus\" set to true\non a page. Multiple fields with \"autoFocus: true\" can/will cause\nunexpected behavior.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "update-strategy",
              "deprecated": false,
              "description": "Determines the updating strategy for the field;\n'input' - the field will update the element state on each change to its value.\n'blur' - the field will update the element state when the user leaves the field.",
              "required": false,
              "default": "FluidUpdateStrategy.INPUT",
              "priority": "high"
            },
            {
              "name": "_standalone",
              "deprecated": false,
              "description": "",
              "required": false,
              "default": "true",
              "priority": "high"
            },
            {
              "name": "auto-validate-children",
              "deprecated": false,
              "description": "",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-theme-provider",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/providers/fluid-theme-provider/fluid-theme-provider.tsx",
            "symbol": "FluidThemeProvider"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "Set the global theme for the components contained within.",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "theme-palette",
              "deprecated": false,
              "description": "When provided, sets the current theme's color palette & appearance.\nNOTE: a theme palette acts as a \"style override\" applied ON TOP of\nthe current theme & isn't necessary for \"standard\" theme aesthetics.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "base-z-index",
              "deprecated": false,
              "description": "CSS z-index value that will be used to set z-index values for all other\nsticky / absolutely positioned components. All component z-index values\nwill be at or above this number.",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-title",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-title/fluid-title.tsx",
            "symbol": "FluidTitle"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "level",
              "deprecated": false,
              "description": "What level of header should we render (i.e 1 is the equivalent of h1, and so on)",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "disable-gutters",
              "deprecated": false,
              "description": "If true, the headers margins will be removed",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "color",
              "deprecated": false,
              "description": "Will set the color of the Title text. Based on pre-defined colors set by Liberty\ncolor scheme available in FluidColor enum .",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [
            {
              "name": "Add title display text as the <fluid",
              "description": "title> content."
            }
          ],
          "css": {}
        },
        {
          "name": "fluid-toggle",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-toggle/fluid-toggle.tsx",
            "symbol": "FluidToggle"
          },
          "attributes": [
            {
              "name": "control-name",
              "deprecated": false,
              "description": "A unique name for the field (usually the dataKey for any form using\nthe input element)",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "label",
              "deprecated": false,
              "description": "Label displayed adjacent to the Toggle <input> element.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "label-text-overflow",
              "deprecated": false,
              "description": "Sets the Form Label's text overflow behavior. By default,\noverflowing label text will be wrapped.",
              "required": false,
              "default": "FluidTextOverflow.WRAP",
              "priority": "high"
            },
            {
              "name": "disabled",
              "deprecated": false,
              "description": "If true, Toggle's <input> will be disabled.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "initial-value",
              "deprecated": false,
              "description": "Default value of the Toggle's <input> element on first load. NOTE:\nthis Prop is NOT dynamically updated after initial load like the\n\"toggled\" Prop is, & cannot be used to update the form element's\nvalue after the first render. Accepts: true | false | 'indeterminate'.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "toggled",
              "deprecated": false,
              "description": "The Toggle's current value (true | false | 'indeterminate'). This\nProp is dynamically updated to reflect the form field's current state,\nso it can be used as a \"synchronous\" alternative to the public async\n\"getValue()\" method. If provided on first load, populates the form\nfield with a default value. After the component is rendered, changes\nto this Prop will update the form field's value (similar to\n\"setValue()\" method). NOTE: \"initialValue\" will override this Prop\non first load if both Props are provided.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "inline-field",
              "deprecated": false,
              "description": "If false, Toggle is rendered as a block element.",
              "required": false,
              "default": "true",
              "priority": "high"
            },
            {
              "name": "toggle-type",
              "deprecated": false,
              "description": "What type of Toggle to display? Default is standard checkbox.",
              "required": false,
              "default": "FluidToggleType.CHECKBOX",
              "priority": "high"
            },
            {
              "name": "help-text",
              "deprecated": false,
              "description": "If provided, Toggle's Form Label will render a \"helptext\" icon\nwith attached Popover. To render a basic Popover with default\nProp values, simply provide the Popover's message as a string\nvalue to this Prop. To render a Popover with customized Props,\nprovide a FluidPopoverConfig object to this Prop with the \"message\"\nproperty set. For more information, please see Popover's API\ndocumentation.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "label-alignment",
              "deprecated": false,
              "description": "Whether label appears to the left / right of Toggle",
              "required": false,
              "default": "FluidAlignment.RIGHT",
              "priority": "high"
            },
            {
              "name": "label-on",
              "deprecated": false,
              "description": "If \"toggleType: switch\", sets the Switch's inner label text for\nits \"on\" state.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "label-off",
              "deprecated": false,
              "description": "If \"toggleType: switch\", sets the Switch's inner label text for\nits \"off\" state.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "auto-focus",
              "deprecated": false,
              "description": "If true, this field will automatically have focus on page load.\nNote: only one form field should have this autoFocus set to true\non a page. If multiple fields have autoFocus = true, then there\ncould be unexpected behaviour.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "as-menu-item",
              "deprecated": false,
              "description": "If true, Toggle is used within a menu & should be styled accordingly.",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "remove-padding",
              "deprecated": false,
              "description": "Removes top/bottom padding from Toggle label when true. Used when\nToggle needs to set within a container that already has vertical\npadding (e.g. Table cell).",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "_standalone",
              "deprecated": false,
              "description": "",
              "required": false,
              "default": "true",
              "priority": "high"
            },
            {
              "name": "auto-validate-children",
              "deprecated": false,
              "description": "",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-toggle-group",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-toggle-group/fluid-toggle-group.tsx",
            "symbol": "FluidToggleGroup"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "toggle-all-label",
              "deprecated": false,
              "description": "If supplied, a \"Toggle All\" Toggle that controls the \"checked\" value\nof all Toggles within the group will be rendered first.",
              "required": false,
              "default": "''",
              "priority": "high"
            },
            {
              "name": "toggle-all-value",
              "deprecated": false,
              "description": "If a \"toggleAllLabel\" is supplied, what should the initial value\nbe? This will determine the state of ALL Toggles on initialization.",
              "required": false,
              "default": "true",
              "priority": "high"
            },
            {
              "name": "toggle-all-type",
              "deprecated": false,
              "description": "What type of Toggle should we use for the \"Toggle All\" Toggle?",
              "required": false,
              "default": "FluidToggleType.CHECKBOX",
              "priority": "high"
            },
            {
              "name": "horizontal-layout",
              "deprecated": false,
              "description": "If true, Toggles will cascade horizontally instead of vertically.",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "disabled",
              "deprecated": false,
              "description": "If true, all Toggles within the group will be disabled (including\n\"Toggle All\" Toggle).",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "as-menu-section",
              "deprecated": false,
              "description": "If true, Toggles are formatted for use within Context Menu.",
              "required": false,
              "default": "false",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-tour",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-tour/fluid-tour.tsx",
            "symbol": "FluidTour"
          },
          "attributes": [
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "global-scroll-offset",
              "deprecated": false,
              "description": "Additional offset to use when scrolling to every step in the tour",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "z-index",
              "deprecated": false,
              "description": "Overrides default CSS z-index values for full screen overlay,\nModal, & highlighted element at current step.",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-tree-menu",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-tree-menu/fluid-tree-menu.tsx",
            "symbol": "FluidTreeMenu"
          },
          "attributes": [
            {
              "name": "theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "display-density",
              "deprecated": false,
              "description": "Adjusts menu item size, padding, & spacing to be more or less compact.\nFor example, \"compact\" density increases the number of menu items shown\nby ~30% compared to \"default\" density. NOTE: it is recommended to use\n\"default\" density for Tree Menu implementations within FLUID Sidebar.",
              "required": false,
              "default": "FluidDisplayDensity.DEFAULT",
              "priority": "high"
            },
            {
              "name": "text-overflow",
              "deprecated": false,
              "description": "Sets how menu item labels handle text overflow. By default, a menu item\nlabel will wrap its text if the width is greater than the width of the Tree\nMenu (this should be used in the majority of use cases for best User\nExperience). Setting this Prop to \"clip\" will truncate text overflow\nmid-character, and \"ellipsis\" will truncate text overflow with \"...\" (these\nvalues should only be used when seeing the entire menu item label text is\nNOT necessary to understand the menu item's context/purpose). Both \"clip\" &\n\"ellipsis\" values will display a tooltip on :hover containing the full,\nunedited menu item label.",
              "required": false,
              "default": "FluidTextOverflow.WRAP",
              "priority": "high"
            },
            {
              "name": "selectable-submenu-buttons",
              "deprecated": false,
              "description": "If true, submenu buttons can be selected like regular menu items.\nIf false (default), submenu buttons can only be used to expand/\ncollapse their child submenus. NOTE: if this Prop is false and\n\"collapsibleSubmenus\" Prop is also false, the \"submenuButtonClick\"\nevent will NOT be emitted when submenu buttons are clicked (unless\nFluidMenuItem \"submenuCollapsible\" property override is used).",
              "required": false,
              "default": "false",
              "priority": "high"
            },
            {
              "name": "collapsible-submenus",
              "deprecated": false,
              "description": "If true (default), submenus can be expanded/collapsed using the\nparent submenu button. If false, all submenus will be rendered\nopen by default & can't be expanded/collapsed. This Prop can\nbe overridden for individual FluidMenuItems using the\n\"submenuCollapsible\" property.",
              "required": false,
              "default": "true",
              "priority": "high"
            },
            {
              "name": "menu-type",
              "deprecated": false,
              "description": "Sets Tree Menu styles & functionality. \"default\" & \"sidebar\" types\nlook & behave as a default Tree Menu. \"dropdown\" type is styled to\nbe embedded within a dropdown menu (i.e. similar to Context Menu\nlinks) & does not display the current \"selected\" menu item.",
              "required": false,
              "default": "FluidMenuType.DEFAULT",
              "priority": "high"
            },
            {
              "name": "sidebar-menu",
              "deprecated": true,
              "description": "DEPRECATED: \"sidebarMenu\" is now deprecated. Instead, use \"menuType\"\nProp with value \"sidebar\". -- Is the Tree Menu displayed within a\nSidebar? If \"true\", adds negative left/right margin that offsets\nthe Sidebar's default padding & creates a seamless, \"edge-to-edge\"\nSidebar menu.",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "fluid-vega",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/components/fluid-vega/fluid-vega.tsx",
            "symbol": "FluidVega"
          },
          "attributes": [
            {
              "name": "override-global-theme",
              "deprecated": false,
              "description": "What theme settings should the component use?",
              "required": false,
              "default": "",
              "priority": "high"
            },
            {
              "name": "theme",
              "deprecated": false,
              "description": "If FluidThemeProvider is used, should this component override the\nglobal theme with its local theme?",
              "required": false,
              "default": "FluidTheme.CORP",
              "priority": "high"
            },
            {
              "name": "vega-renderer",
              "deprecated": false,
              "description": "Renderer to use with Vega - either 'canvas' or 'svg'.  'svg' is the default.",
              "required": false,
              "default": "'svg'",
              "priority": "high"
            },
            {
              "name": "inputs-layout",
              "deprecated": false,
              "description": "Layout relationship between the main visualization area and input area.\n'vertical' is the default.",
              "required": false,
              "default": "",
              "priority": "high"
            }
          ],
          "slots": [],
          "css": {}
        },
        {
          "name": "test-component",
          "deprecated": false,
          "description": "",
          "source": {
            "module": "src/utils/test/test-harness.component.tsx",
            "symbol": "TestComponent"
          },
          "attributes": [],
          "slots": [],
          "css": {}
        }
      ]
    },
    "js": {
      "events": [
        {
          "events": []
        },
        {
          "events": [
            {
              "name": "accordionPanelToggled",
              "description": "Event emitted when Accordion Panel is expanded or expanded. Payload\ncontains the Accordion Panel's \"id\" attribute (generated value if\nundefined) & \"expanded state\" status."
            }
          ]
        },
        {
          "events": []
        },
        {
          "events": [
            {
              "name": "valueChange",
              "description": "Emits the element state when its value changes"
            }
          ]
        },
        {
          "events": [
            {
              "name": "alertDismissed",
              "description": "Event emitted when Alert is dismissed that contains current\n\"state\" of Alert (FluidAlertConfig)."
            },
            {
              "name": "alertShown",
              "description": "Event emitted when Alert is shown that contains current state of the\nAlert (NOTE: dispatched on first load when \"visible\" is true & when\nshow() is called)."
            }
          ]
        },
        {
          "events": []
        },
        {
          "events": []
        },
        {
          "events": [
            {
              "name": "breadcrumbClicked",
              "description": "Emits the link route and prevents default behavior of anchor when clicked.\nIn order to handle the routing of the application; this value should be\nintercepted by adding an event listener to breadcrumb component; routing\nlogic should be handled under here as click will not load a new page."
            }
          ]
        },
        {
          "events": []
        },
        {
          "events": [
            {
              "name": "selected",
              "description": "Emits the FluidOption \"value\" property of an option when it's selected."
            }
          ]
        },
        {
          "events": [
            {
              "name": "action",
              "description": "Event emitted when \"action\" button is clicked."
            },
            {
              "name": "collapseToggled",
              "description": "Event emitted when \"collapse\" button is clicked."
            },
            {
              "name": "cardCollapsed",
              "description": "Event emitted when the card is collapsed."
            },
            {
              "name": "cardOpened",
              "description": "Event emitted when the card is opened."
            },
            {
              "name": "refreshed",
              "description": "DEPRECATED: \"refreshed\" Event is now deprecated (as well as\n\"refreshable\" + related Props). Instead, add an Icon-Only FLUID\nButton with \"refresh\" Icon to Card's \"header\" slot & listen for\nclick event there -- Event emitted when \"refresh\" button is clicked."
            }
          ]
        },
        {
          "events": []
        },
        {
          "events": []
        },
        {
          "events": [
            {
              "name": "valueChange",
              "description": "Emits the element state when its value changes"
            }
          ]
        },
        {
          "events": [
            {
              "name": "propsUpdated",
              "description": ""
            }
          ]
        },
        {
          "events": [
            {
              "name": "frameworkChanged",
              "description": ""
            }
          ]
        },
        {
          "events": []
        },
        {
          "events": [
            {
              "name": "myEvent",
              "description": "Example custom DOM event containing a boolean payload.\nhttps://stenciljs.com/docs/events#event-decorator\nTODO: Remove before initial commit"
            }
          ]
        },
        {
          "events": []
        },
        {
          "events": [
            {
              "name": "confirmed",
              "description": "Emitted when dialog is closed with confirmed response"
            },
            {
              "name": "cancelled",
              "description": "Emitted when dialog is closed with canceled response"
            }
          ]
        },
        {
          "events": []
        },
        {
          "events": []
        },
        {
          "events": []
        },
        {
          "events": [
            {
              "name": "contextMenuToggled",
              "description": "Event emitted each time Context Menu is hidden or shown. Contains\na boolean that is true if menu is open & false if menu is closed."
            },
            {
              "name": "linkClicked",
              "description": "Event emitted each time a link is clicked. Contains the\nFluidContextMenuLink object of the link that was clicked."
            },
            {
              "name": "toggleChanged",
              "description": "Event emitted each time a Toggle changes. Contains the entire\nFluidContextMenuSection object of the Toggle that was changed so\nthe calling component has access to the status of ALL Toggles\nwithin the menu section."
            }
          ]
        },
        {
          "events": [
            {
              "name": "valueChange",
              "description": "Emits the element state when its value changes"
            }
          ]
        },
        {
          "events": [
            {
              "name": "dataLayerStateUpdated",
              "description": "Emits whenever the data layer state has been updated."
            },
            {
              "name": "dataLayerReady",
              "description": "Emits whenever the data layer is connected to the DOM."
            },
            {
              "name": "fluidDataLayerReady",
              "description": ""
            }
          ]
        },
        {
          "events": [
            {
              "name": "valueChange",
              "description": "Emits the element state when its value changes"
            }
          ]
        },
        {
          "events": []
        },
        {
          "events": [
            {
              "name": "myEvent",
              "description": ""
            }
          ]
        },
        {
          "events": [
            {
              "name": "drawerToggled",
              "description": "Event emitted when Drawer is opened or closed. Emits \"true\" when\nDrawer is opened & \"false\" when closed."
            }
          ]
        },
        {
          "events": [
            {
              "name": "linkClicked",
              "description": "Event emitted when a menu item in the dropdown menu is clicked\n(NOTE: does NOT include \"submenu buttons\"). Contains the menu\nitem's FluidMenuItem object."
            }
          ]
        },
        {
          "events": [
            {
              "name": "actionClicked",
              "description": "Emits the string action of whatever action was clicked if it is configured\nwith a string action rather than a function."
            }
          ]
        },
        {
          "events": [
            {
              "name": "expanded",
              "description": "Emit the expansion status of the content collapse incase the calling\ncomponent wants to act as an accordian"
            }
          ]
        },
        {
          "events": [
            {
              "name": "fileListUpdated",
              "description": ""
            },
            {
              "name": "uploadClicked",
              "description": ""
            },
            {
              "name": "actionClicked",
              "description": ""
            }
          ]
        },
        {
          "events": [
            {
              "name": "activated",
              "description": "Event emitted when Focus Trap \"enabled\" Prop becomes true."
            },
            {
              "name": "deactivated",
              "description": "Event emitted when Focus Trap \"enabled\" Prop becomes false."
            }
          ]
        },
        {
          "events": []
        },
        {
          "events": []
        },
        {
          "events": []
        },
        {
          "events": [
            {
              "name": "valueChanged",
              "description": "Emits the element state of a single element within in the form\nwhenever it changes"
            },
            {
              "name": "formChanged",
              "description": "Emits the entire form state whenever an element within changes it,\nthis form state includes raw value, as well as element state for each\nchanged element, overall form validity, and a list of errors if invalid."
            },
            {
              "name": "actionClicked",
              "description": "Emits when one of the form action buttons is clicked. Forms are limited\nto a SUBMIT or a CANCEL action, which each have a FLUID-defined function,\nbut actionKey and button text are configurable to allow parent component\nto react if either is clicked."
            }
          ]
        },
        {
          "events": [
            {
              "name": "valueChange",
              "description": "Emits the element state when its value changes"
            }
          ]
        },
        {
          "events": [
            {
              "name": "valueChanged",
              "description": "Proxy form element value to parent"
            }
          ]
        },
        {
          "events": []
        },
        {
          "events": []
        },
        {
          "events": []
        },
        {
          "events": [
            {
              "name": "linkClicked",
              "description": "Event emitted when a link is clicked. Contains the corresponding\nFluidMenuItem's \"route\" or \"href\" property value. This event only\napplies to links (i.e. menu items), and is NOT emitted when a\nsubmenu/mega menu button is clicked."
            },
            {
              "name": "menuItemClick",
              "description": "Event fired when a menu item with no submenu / mega menu is clicked.\nContains the entire FluidMenuItem object."
            }
          ]
        },
        {
          "events": []
        },
        {
          "events": []
        },
        {
          "events": []
        },
        {
          "events": []
        },
        {
          "events": [
            {
              "name": "valueChange",
              "description": "Emits the element state when its value changes."
            }
          ]
        },
        {
          "events": []
        },
        {
          "events": []
        },
        {
          "events": []
        },
        {
          "events": [
            {
              "name": "linkClicked",
              "description": "Emits \"route\" or \"href\" Prop value when Link is clicked."
            }
          ]
        },
        {
          "events": []
        },
        {
          "events": []
        },
        {
          "events": [
            {
              "name": "actionClicked",
              "description": "Event emitted when an action button is clicked. Contains the\naction's \"eventKey\" property (FluidModalAction)."
            },
            {
              "name": "modalClosed",
              "description": "Event emitted when Modal is closed."
            },
            {
              "name": "outsideClick",
              "description": "Event emitted when Modal is closed via outside click."
            }
          ]
        },
        {
          "events": []
        },
        {
          "events": [
            {
              "name": "sidebarLinkClicked",
              "description": "DEPRECATED: The \"sidebarLinkClicked\" event is now deprecated.\nInstead, listen for \"menuItemClick\" from the FLUID Tree Menu\ncomponent. -- Event emitted when a menu item within a Sidebar\nTree Menu is clicked."
            }
          ]
        },
        {
          "events": [
            {
              "name": "pageChanged",
              "description": "Event fired when a new page is selected within Paginator.\nEmits the derived FluidPaginationState object."
            }
          ]
        },
        {
          "events": []
        },
        {
          "events": [
            {
              "name": "popoverToggled",
              "description": "Event emitted when Popover is opened or closed. Emits \"true\" when\nPopover is opened & \"false\" when closed."
            }
          ]
        },
        {
          "events": [
            {
              "name": "valueChange",
              "description": "Emits the element state when its value changes"
            }
          ]
        },
        {
          "events": []
        },
        {
          "events": [
            {
              "name": "valueChange",
              "description": "Emits the element state when its value changes."
            }
          ]
        },
        {
          "events": [
            {
              "name": "search",
              "description": "Emits when the search button has been clicked"
            },
            {
              "name": "searchTermUpdated",
              "description": "Emits when the search term is updated"
            }
          ]
        },
        {
          "events": []
        },
        {
          "events": [
            {
              "name": "selected",
              "description": "Emits the FluidOption value of the selected option\naccessible from $event.detail"
            },
            {
              "name": "selectionCleared",
              "description": "Emits whenever the selection was cleared with the cancel\nicon - { payload: FluidOption } - the option that was cleared."
            },
            {
              "name": "valueChange",
              "description": "Emits the entire element state for the element"
            }
          ]
        },
        {
          "events": [
            {
              "name": "sidebarToggled",
              "description": "Event emitted when Sidebar is opened or closed. The event's payload\nis a boolean value that indicates its \"visible\" status. At desktop\nsize, this event is only emitted when the \"collapsible\" Prop is true."
            }
          ]
        },
        {
          "events": []
        },
        {
          "events": [
            {
              "name": "statusChanged",
              "description": "Event emitted when the property `status` was changed."
            },
            {
              "name": "titleChanged",
              "description": "Event emitted when the property `title` was changed."
            },
            {
              "name": "hiddenChanged",
              "description": "Event emitted when the property `hidden` was changed."
            }
          ]
        },
        {
          "events": [
            {
              "name": "finished",
              "description": "Emits `true` or `false` to know if the stepper was finished.\nChecks if all the steps don't have an error status."
            },
            {
              "name": "stepChanged",
              "description": "Emits the active step when the step is changed."
            }
          ]
        },
        {
          "events": []
        },
        {
          "events": [
            {
              "name": "disableChanged",
              "description": "Event emitted when the property `disabled` was changed."
            },
            {
              "name": "titleChanged",
              "description": "Event emitted when the property `title` was changed."
            },
            {
              "name": "hiddenChanged",
              "description": "Event emitted when the property `hidden` was changed."
            }
          ]
        },
        {
          "events": [
            {
              "name": "leftScroll",
              "description": ""
            },
            {
              "name": "rightScroll",
              "description": ""
            }
          ]
        },
        {
          "events": [
            {
              "name": "firstRender",
              "description": ""
            },
            {
              "name": "actionClicked",
              "description": "Emits the row actionKey that was clicked, along with the rowData from\nthe row that was clicked"
            },
            {
              "name": "cellClicked",
              "description": "Emits the cell data whenever a cell is clicked"
            },
            {
              "name": "formActionClicked",
              "description": "Emits when one of the form actions is clicked, in case the parent component\nhas any external validations etc to do"
            },
            {
              "name": "editableCellChange",
              "description": "Emits whenever an editable cell changes value. Emits the new value, along with the\nrow data for the row it changed on."
            },
            {
              "name": "dataMutated",
              "description": "Emits when the tables 'Save' action is clicked. Emits both the new, now\nupdated dataset, along with a list of mutated rows. This allows the\nconsuming component to intercept changes and decide whether to commit\nthe change, or to reset the data;"
            },
            {
              "name": "formValueChanged",
              "description": "Fired whenever an element in a nested form value changes"
            },
            {
              "name": "nestedFormState",
              "description": "Emits when the state of the nested forms changes."
            },
            {
              "name": "groupToggled",
              "description": "Emits when the expansion state of a group is toggled."
            },
            {
              "name": "groupsToggled",
              "description": "Emits the group state when all are expanded/collapsed"
            },
            {
              "name": "tableSearched",
              "description": "Emits whenever the table search is executed"
            },
            {
              "name": "tableSorted",
              "description": "Emits whenever the table is sorted"
            },
            {
              "name": "tableFiltered",
              "description": "Emits whenever the table is filtered"
            },
            {
              "name": "columnVisibility",
              "description": "Emits whenever the table column visibility has changed."
            },
            {
              "name": "expansionToggled",
              "description": "Emits whenever a table row is expanded."
            }
          ]
        },
        {
          "events": [
            {
              "name": "tabChanged",
              "description": "Event emitted when a Tab is clicked, regardless of whether the selected\nTab changes."
            },
            {
              "name": "tabHasChanged",
              "description": "Event emitted when a Tab is clicked that changes the selected Tab."
            }
          ]
        },
        {
          "events": []
        },
        {
          "events": [
            {
              "name": "valueChange",
              "description": "Emits the element state when the form field's value changes (i.e.\nfired on every keystroke)."
            }
          ]
        },
        {
          "events": []
        },
        {
          "events": []
        },
        {
          "events": [
            {
              "name": "valueChange",
              "description": "Emits the element state when its value changes"
            }
          ]
        },
        {
          "events": [
            {
              "name": "toggleState",
              "description": "Emits the state of the Toggle Group with each Toggle change.\nThe emitted element takes the form of an object such that each\nkey is the `controlName`, and the value is the value of the Toggle.\n\n{ <controlName>: <toggleValue> }"
            }
          ]
        },
        {
          "events": [
            {
              "name": "tourStopped",
              "description": "Emits when the tour is stopped and at what step number (0 indexed)."
            }
          ]
        },
        {
          "events": [
            {
              "name": "menuItemClick",
              "description": "Event fired when a menu item with no submenu is clicked. Contains\nthe FluidMenuItem that was clicked."
            },
            {
              "name": "submenuButtonClick",
              "description": "Event fired when a menu item with a submenu is clicked. Contains\nthe FluidMenuItem that was clicked."
            }
          ]
        },
        {
          "events": []
        },
        {
          "events": []
        }
      ],
      "properties": [
        {
          "properties": [
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "disableAutoClose"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "panelTitle"
            },
            {
              "name": "expanded"
            },
            {
              "name": "iconBefore"
            },
            {
              "name": "badgeConfig"
            },
            {
              "name": "_siblingHasIcon"
            },
            {
              "name": "_iconPlaceholderSize"
            }
          ]
        },
        {
          "properties": []
        },
        {
          "properties": [
            {
              "name": "config"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "theme"
            },
            {
              "name": "translations"
            },
            {
              "name": "fieldAlias"
            },
            {
              "name": "disabled"
            },
            {
              "name": "dataPath"
            },
            {
              "name": "parentState"
            },
            {
              "name": "autoValidateChildren"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "identifier"
            },
            {
              "name": "fluidTranslate"
            },
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "severity"
            },
            {
              "name": "visible"
            },
            {
              "name": "message"
            },
            {
              "name": "dismissible"
            },
            {
              "name": "timeout"
            },
            {
              "name": "loading"
            },
            {
              "name": "inline"
            },
            {
              "name": "removeMargin"
            },
            {
              "name": "snackbar"
            },
            {
              "name": "position"
            },
            {
              "name": "config"
            },
            {
              "name": "zIndex"
            },
            {
              "name": "analyticsConfig"
            },
            {
              "name": "alertCargo"
            },
            {
              "name": "width"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "fluidTranslate"
            },
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "label"
            },
            {
              "name": "solid"
            },
            {
              "name": "chip"
            },
            {
              "name": "indicator"
            },
            {
              "name": "iconBefore"
            },
            {
              "name": "iconAfter"
            },
            {
              "name": "color"
            },
            {
              "name": "block"
            },
            {
              "name": "config"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "fluidTranslate"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "theme"
            },
            {
              "name": "chartId"
            },
            {
              "name": "chartTitle"
            },
            {
              "name": "subTitle"
            },
            {
              "name": "chartData"
            },
            {
              "name": "chartLabels"
            },
            {
              "name": "chartHoverData"
            },
            {
              "name": "currencySymbol"
            },
            {
              "name": "hasBackground"
            },
            {
              "name": "label"
            },
            {
              "name": "colorOverride"
            },
            {
              "name": "barPercentage"
            },
            {
              "name": "categoryPercentage"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "homeLabel"
            },
            {
              "name": "homeLink"
            },
            {
              "name": "trail"
            },
            {
              "name": "config"
            },
            {
              "name": "fluidTranslate"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "fluidTranslate"
            },
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "label"
            },
            {
              "name": "type"
            },
            {
              "name": "colorScheme"
            },
            {
              "name": "disabled"
            },
            {
              "name": "removeMargin"
            },
            {
              "name": "removeHorizontalMargin"
            },
            {
              "name": "removeVerticalMargin"
            },
            {
              "name": "popoverConfig"
            },
            {
              "name": "small"
            },
            {
              "name": "large"
            },
            {
              "name": "icon"
            },
            {
              "name": "controlBarPosition"
            },
            {
              "name": "iconBefore"
            },
            {
              "name": "iconAfter"
            },
            {
              "name": "config"
            },
            {
              "name": "identifier"
            },
            {
              "name": "alignedWithFormElement"
            },
            {
              "name": "inheritIconColor"
            },
            {
              "name": "analyticsConfig"
            },
            {
              "name": "color"
            },
            {
              "name": "popover"
            },
            {
              "name": "popoverTitle"
            },
            {
              "name": "popoverWidth"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "name"
            },
            {
              "name": "options"
            },
            {
              "name": "selectedValue"
            },
            {
              "name": "preventDefault"
            },
            {
              "name": "debounceChange"
            },
            {
              "name": "disabled"
            },
            {
              "name": "optionButtonType"
            },
            {
              "name": "labels"
            },
            {
              "name": "selectedLabel"
            },
            {
              "name": "fluidTranslate"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "fluidTranslate"
            },
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "cardTitle"
            },
            {
              "name": "titleLabel"
            },
            {
              "name": "subtitle"
            },
            {
              "name": "badgeConfig"
            },
            {
              "name": "actionButtonConfig"
            },
            {
              "name": "fullHeight"
            },
            {
              "name": "border"
            },
            {
              "name": "dropShadow"
            },
            {
              "name": "collapsible"
            },
            {
              "name": "collapsed"
            },
            {
              "name": "removeContentPadding"
            },
            {
              "name": "removeVerticalContentPadding"
            },
            {
              "name": "removeHeaderBorder"
            },
            {
              "name": "removeMargin"
            },
            {
              "name": "actionText"
            },
            {
              "name": "actionIcon"
            },
            {
              "name": "isNew"
            },
            {
              "name": "refreshable"
            },
            {
              "name": "refreshTooltip"
            },
            {
              "name": "refreshTooltipPlacement"
            },
            {
              "name": "refreshing"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "theme"
            },
            {
              "name": "controlsOnHover"
            },
            {
              "name": "activeSlideId"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "code"
            },
            {
              "name": "noContainer"
            },
            {
              "name": "type"
            },
            {
              "name": "inlineType"
            },
            {
              "name": "copyable"
            },
            {
              "name": "muted"
            },
            {
              "name": "copyMessage"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "fluidTranslate"
            },
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "options"
            },
            {
              "name": "optionLookup"
            },
            {
              "name": "multiSelect"
            },
            {
              "name": "allowCustomInput"
            },
            {
              "name": "customFilter"
            },
            {
              "name": "maskingConfig"
            },
            {
              "name": "sortOrder"
            },
            {
              "name": "controlName"
            },
            {
              "name": "initialValue"
            },
            {
              "name": "value"
            },
            {
              "name": "label"
            },
            {
              "name": "labelTextOverflow"
            },
            {
              "name": "supplementaryLabel"
            },
            {
              "name": "placeholder"
            },
            {
              "name": "disabled"
            },
            {
              "name": "readonly"
            },
            {
              "name": "validation"
            },
            {
              "name": "helpText"
            },
            {
              "name": "inlineField"
            },
            {
              "name": "allowCancel"
            },
            {
              "name": "disableAutoHighlight"
            },
            {
              "name": "dynamicMenuWidth"
            },
            {
              "name": "autoFocus"
            },
            {
              "name": "emptyListMessage"
            },
            {
              "name": "config"
            },
            {
              "name": "zIndex"
            },
            {
              "name": "_standalone"
            },
            {
              "name": "parentState"
            },
            {
              "name": "autoValidateChildren"
            },
            {
              "name": "externalState"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "theme"
            },
            {
              "name": "component"
            },
            {
              "name": "docs"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "theme"
            },
            {
              "name": "definition"
            },
            {
              "name": "framework"
            },
            {
              "name": "configExpanded"
            },
            {
              "name": "toggleCodeEnabled"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "theme"
            },
            {
              "name": "definition"
            },
            {
              "name": "refreshOnChange"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "myBooleanProperty"
            },
            {
              "name": "myStringProperty"
            },
            {
              "name": "myArrayProperty"
            },
            {
              "name": "myObjectProperty"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "modalTitle"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "theme"
            },
            {
              "name": "open"
            },
            {
              "name": "message"
            },
            {
              "name": "confirmLabel"
            },
            {
              "name": "cancelLabel"
            },
            {
              "name": "fluidTranslate"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "inline"
            },
            {
              "name": "width"
            },
            {
              "name": "minWidth"
            },
            {
              "name": "maxWidth"
            },
            {
              "name": "height"
            },
            {
              "name": "minHeight"
            },
            {
              "name": "maxHeight"
            },
            {
              "name": "overflowX"
            },
            {
              "name": "overflowY"
            },
            {
              "name": "padding"
            },
            {
              "name": "margin"
            },
            {
              "name": "textAlign"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "themeVariant"
            },
            {
              "name": "mainInstance"
            },
            {
              "name": "hasSidebar"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "isCollapsed"
            },
            {
              "name": "collapsedHeight"
            },
            {
              "name": "maxContentHeight"
            },
            {
              "name": "allowDynamicHeight"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "menuId"
            },
            {
              "name": "menuSections"
            },
            {
              "name": "disabled"
            },
            {
              "name": "asWrapper"
            },
            {
              "name": "outsideClickClose"
            },
            {
              "name": "menuAlignment"
            },
            {
              "name": "absolutePosition"
            },
            {
              "name": "menuSectionStyle"
            },
            {
              "name": "openOnHover"
            },
            {
              "name": "closeLabel"
            },
            {
              "name": "zIndex"
            },
            {
              "name": "displayMenuActions"
            },
            {
              "name": "fluidTranslate"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "fluidTranslate"
            },
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "controlName"
            },
            {
              "name": "label"
            },
            {
              "name": "labelTextOverflow"
            },
            {
              "name": "placeholder"
            },
            {
              "name": "disabled"
            },
            {
              "name": "readonly"
            },
            {
              "name": "initialValue"
            },
            {
              "name": "value"
            },
            {
              "name": "validation"
            },
            {
              "name": "type"
            },
            {
              "name": "supplementaryLabel"
            },
            {
              "name": "helpText"
            },
            {
              "name": "currencySymbol"
            },
            {
              "name": "currencyLocale"
            },
            {
              "name": "showCurrency"
            },
            {
              "name": "inlineField"
            },
            {
              "name": "allowCancel"
            },
            {
              "name": "step"
            },
            {
              "name": "wholeOnly"
            },
            {
              "name": "roundingMethod"
            },
            {
              "name": "displayStepperButtons"
            },
            {
              "name": "autoFocus"
            },
            {
              "name": "updateStrategy"
            },
            {
              "name": "shortHandNumbers"
            },
            {
              "name": "config"
            },
            {
              "name": "_standalone"
            },
            {
              "name": "textAlign"
            },
            {
              "name": "parentState"
            },
            {
              "name": "autoValidateChildren"
            },
            {
              "name": "externalState"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "dataLayerState"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "theme"
            },
            {
              "name": "config"
            },
            {
              "name": "disabled"
            },
            {
              "name": "traceEventLog"
            },
            {
              "name": "includeLogs"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "fluidTranslate"
            },
            {
              "name": "controlName"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "theme"
            },
            {
              "name": "label"
            },
            {
              "name": "labelTextOverflow"
            },
            {
              "name": "helpText"
            },
            {
              "name": "placeholder"
            },
            {
              "name": "disabled"
            },
            {
              "name": "readonly"
            },
            {
              "name": "initialValue"
            },
            {
              "name": "validation"
            },
            {
              "name": "type"
            },
            {
              "name": "supplementaryLabel"
            },
            {
              "name": "inlineField"
            },
            {
              "name": "allowCancel"
            },
            {
              "name": "minDate"
            },
            {
              "name": "maxDate"
            },
            {
              "name": "config"
            },
            {
              "name": "autoFocus"
            },
            {
              "name": "showPickerOnClick"
            },
            {
              "name": "updateStrategy"
            },
            {
              "name": "_standalone"
            },
            {
              "name": "parentState"
            },
            {
              "name": "autoValidateChildren"
            },
            {
              "name": "externalState"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "theme"
            },
            {
              "name": "color"
            },
            {
              "name": "width"
            },
            {
              "name": "borderStyle"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "theme"
            },
            {
              "name": "imageName"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "fluidTranslate"
            },
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "visible"
            },
            {
              "name": "anchor"
            },
            {
              "name": "size"
            },
            {
              "name": "padding"
            },
            {
              "name": "outsideClickClose"
            },
            {
              "name": "hideCloseIcon"
            },
            {
              "name": "disableScroll"
            },
            {
              "name": "zIndex"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "menuId"
            },
            {
              "name": "menuItems"
            },
            {
              "name": "label"
            },
            {
              "name": "type"
            },
            {
              "name": "colorScheme"
            },
            {
              "name": "iconBefore"
            },
            {
              "name": "openOnHover"
            },
            {
              "name": "absolutePosition"
            },
            {
              "name": "maxHeight"
            },
            {
              "name": "disabled"
            },
            {
              "name": "removeMargin"
            },
            {
              "name": "removeHorizontalMargin"
            },
            {
              "name": "removeVerticalMargin"
            },
            {
              "name": "zIndex"
            },
            {
              "name": "analyticsConfig"
            },
            {
              "name": "color"
            },
            {
              "name": "links"
            },
            {
              "name": "icon"
            },
            {
              "name": "fluidTranslate"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "actions"
            },
            {
              "name": "titleText"
            },
            {
              "name": "bodyText"
            },
            {
              "name": "iconConfig"
            },
            {
              "name": "imageConfig"
            },
            {
              "name": "type"
            },
            {
              "name": "themeVariant"
            },
            {
              "name": "config"
            },
            {
              "name": "fluidTranslate"
            },
            {
              "name": "analyticsConfig"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "question"
            },
            {
              "name": "answer"
            },
            {
              "name": "collapsed"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "theme"
            },
            {
              "name": "acceptMultiple"
            },
            {
              "name": "acceptFileTypes"
            },
            {
              "name": "uploadControlConfig"
            },
            {
              "name": "supplementaryInformation"
            },
            {
              "name": "fileListHeaderConfig"
            },
            {
              "name": "showFileList"
            },
            {
              "name": "emptyStateConfig"
            },
            {
              "name": "populatedStateConfig"
            },
            {
              "name": "restrictedFileTypeMessage"
            },
            {
              "name": "actionsDisabled"
            },
            {
              "name": "fluidTranslate"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "rootElement"
            },
            {
              "name": "enabled"
            },
            {
              "name": "disableAutoActivation"
            },
            {
              "name": "autoFocus"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "zIndex"
            },
            {
              "name": "sticky"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "fromData"
            },
            {
              "name": "enableWatchers"
            },
            {
              "name": "config"
            },
            {
              "name": "disabled"
            },
            {
              "name": "formName"
            },
            {
              "name": "layout"
            },
            {
              "name": "columnOptions"
            },
            {
              "name": "rowOptions"
            },
            {
              "name": "elements"
            },
            {
              "name": "submitConfig"
            },
            {
              "name": "cancelConfig"
            },
            {
              "name": "confirmationDialogCancelConfig"
            },
            {
              "name": "controlsAlignment"
            },
            {
              "name": "showGridLayout"
            },
            {
              "name": "emitOnRender"
            },
            {
              "name": "externalState"
            },
            {
              "name": "analyticsConfig"
            },
            {
              "name": "inline"
            },
            {
              "name": "autoValidateChildren"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "config"
            },
            {
              "name": "confirmationDialogCancelConfig"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "theme"
            },
            {
              "name": "disabled"
            },
            {
              "name": "initialValue"
            },
            {
              "name": "entryValidation"
            },
            {
              "name": "disableAddUntilValid"
            },
            {
              "name": "dataPath"
            },
            {
              "name": "addButtonErrorMessage"
            },
            {
              "name": "_standalone"
            },
            {
              "name": "_updateStrategy"
            },
            {
              "name": "parentState"
            },
            {
              "name": "autoValidateChildren"
            },
            {
              "name": "fluidTranslate"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "disabled"
            },
            {
              "name": "config"
            },
            {
              "name": "parentState"
            },
            {
              "name": "externalState"
            },
            {
              "name": "autoValidateChildren"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "fluidTranslate"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "theme"
            },
            {
              "name": "supplementaryLabel"
            },
            {
              "name": "helpText"
            },
            {
              "name": "label"
            },
            {
              "name": "touched"
            },
            {
              "name": "validation"
            },
            {
              "name": "elementState"
            },
            {
              "name": "disabled"
            },
            {
              "name": "textOverflow"
            },
            {
              "name": "resetPosition"
            },
            {
              "name": "inlineQuestion"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "fullHeight"
            },
            {
              "name": "inline"
            },
            {
              "name": "gridItemSpacing"
            },
            {
              "name": "removeSpacing"
            },
            {
              "name": "justify"
            },
            {
              "name": "alignItems"
            },
            {
              "name": "direction"
            },
            {
              "name": "gutter"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "col"
            },
            {
              "name": "colSm"
            },
            {
              "name": "colMd"
            },
            {
              "name": "colLg"
            },
            {
              "name": "colXl"
            },
            {
              "name": "auto"
            },
            {
              "name": "alignSelf"
            },
            {
              "name": "order"
            },
            {
              "name": "pullRight"
            },
            {
              "name": "pullLeft"
            },
            {
              "name": "config"
            },
            {
              "name": "alignItems"
            },
            {
              "name": "gridItemCargo"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "fluidTranslate"
            },
            {
              "name": "theme"
            },
            {
              "name": "themePalette"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "links"
            },
            {
              "name": "noLogo"
            },
            {
              "name": "fixedPosition"
            },
            {
              "name": "alignment"
            },
            {
              "name": "hoverOpenSubmenus"
            },
            {
              "name": "displayDensity"
            },
            {
              "name": "fluidLogo"
            },
            {
              "name": "zIndex"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "active"
            },
            {
              "name": "customStyles"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "translations"
            },
            {
              "name": "language"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "iconKey"
            },
            {
              "name": "arialabel"
            },
            {
              "name": "slotName"
            },
            {
              "name": "size"
            },
            {
              "name": "color"
            },
            {
              "name": "rotate"
            },
            {
              "name": "flipVertical"
            },
            {
              "name": "inline"
            },
            {
              "name": "customStyles"
            },
            {
              "name": "position"
            },
            {
              "name": "scale"
            },
            {
              "name": "popoverConfig"
            },
            {
              "name": "disabled"
            },
            {
              "name": "interactive"
            },
            {
              "name": "config"
            },
            {
              "name": "popoverParentContainer"
            },
            {
              "name": "popoverIgnoreClippingBoundaries"
            },
            {
              "name": "popover"
            },
            {
              "name": "popoverPersistable"
            },
            {
              "name": "popoverPlacement"
            },
            {
              "name": "popoverWidth"
            },
            {
              "name": "fluidTranslate"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "fluidTranslate"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "theme"
            },
            {
              "name": "config"
            },
            {
              "name": "src"
            },
            {
              "name": "width"
            },
            {
              "name": "noContainer"
            },
            {
              "name": "inline"
            },
            {
              "name": "altText"
            },
            {
              "name": "enableZoomModal"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "fluidTranslate"
            },
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "controlName"
            },
            {
              "name": "type"
            },
            {
              "name": "initialValue"
            },
            {
              "name": "value"
            },
            {
              "name": "updateStrategy"
            },
            {
              "name": "label"
            },
            {
              "name": "labelTextOverflow"
            },
            {
              "name": "supplementaryLabel"
            },
            {
              "name": "placeholder"
            },
            {
              "name": "disabled"
            },
            {
              "name": "readonly"
            },
            {
              "name": "validation"
            },
            {
              "name": "helpText"
            },
            {
              "name": "inlineField"
            },
            {
              "name": "allowCancel"
            },
            {
              "name": "autoFocus"
            },
            {
              "name": "maskingConfig"
            },
            {
              "name": "maxLength"
            },
            {
              "name": "step"
            },
            {
              "name": "displayStepperButtons"
            },
            {
              "name": "wholeOnly"
            },
            {
              "name": "roundingMethod"
            },
            {
              "name": "config"
            },
            {
              "name": "_standalone"
            },
            {
              "name": "textAlign"
            },
            {
              "name": "parentState"
            },
            {
              "name": "autoValidateChildren"
            },
            {
              "name": "externalState"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "label"
            },
            {
              "name": "muted"
            },
            {
              "name": "inline"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "fluidTranslate"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "theme"
            },
            {
              "name": "chartId"
            },
            {
              "name": "chartTitle"
            },
            {
              "name": "subTitle"
            },
            {
              "name": "chartData"
            },
            {
              "name": "chartLabels"
            },
            {
              "name": "chartHoverData"
            },
            {
              "name": "currencySymbol"
            },
            {
              "name": "hasBackground"
            },
            {
              "name": "label"
            },
            {
              "name": "legendLabels"
            },
            {
              "name": "hasLegend"
            },
            {
              "name": "colorOverride"
            },
            {
              "name": "datasetOverrides"
            },
            {
              "name": "annotations"
            },
            {
              "name": "maintainAspectRatio"
            },
            {
              "name": "chartHeight"
            },
            {
              "name": "chartWidth"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "determinate"
            },
            {
              "name": "type"
            },
            {
              "name": "value"
            },
            {
              "name": "max"
            },
            {
              "name": "label"
            },
            {
              "name": "labelId"
            },
            {
              "name": "weight"
            },
            {
              "name": "config"
            },
            {
              "name": "fluidTranslate"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "fluidTranslate"
            },
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "href"
            },
            {
              "name": "route"
            },
            {
              "name": "inline"
            },
            {
              "name": "center"
            },
            {
              "name": "target"
            },
            {
              "name": "disabled"
            },
            {
              "name": "type"
            },
            {
              "name": "iconBefore"
            },
            {
              "name": "iconAfter"
            },
            {
              "name": "colorScheme"
            },
            {
              "name": "link"
            },
            {
              "name": "useNative"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "theme"
            },
            {
              "name": "config"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "size"
            },
            {
              "name": "circleType"
            },
            {
              "name": "centered"
            },
            {
              "name": "verticalPadding"
            },
            {
              "name": "loadingMessage"
            },
            {
              "name": "container"
            },
            {
              "name": "height"
            },
            {
              "name": "muted"
            },
            {
              "name": "loading"
            },
            {
              "name": "spinnerId"
            },
            {
              "name": "zIndex"
            },
            {
              "name": "fluidTranslate"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "fluidTranslate"
            },
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "modalTitle"
            },
            {
              "name": "size"
            },
            {
              "name": "open"
            },
            {
              "name": "transparentOverlay"
            },
            {
              "name": "outsideClickClose"
            },
            {
              "name": "modalActions"
            },
            {
              "name": "actionsDisabled"
            },
            {
              "name": "shouldDisableClose"
            },
            {
              "name": "hideCloseIcon"
            },
            {
              "name": "limitOverflow"
            },
            {
              "name": "disableBackgroundScroll"
            },
            {
              "name": "disableFocusTrap"
            },
            {
              "name": "autoFocus"
            },
            {
              "name": "disableTopDocumentIFrameShift"
            },
            {
              "name": "keyboardIntercept"
            },
            {
              "name": "zIndex"
            },
            {
              "name": "analyticsConfig"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "theme"
            },
            {
              "name": "docs"
            },
            {
              "name": "objectStructure"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "fluidTranslate"
            },
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "pageTitle"
            },
            {
              "name": "leftSidebarConfig"
            },
            {
              "name": "rightSidebarConfig"
            },
            {
              "name": "themeVariant"
            },
            {
              "name": "hasSidebar"
            },
            {
              "name": "sidebarLinks"
            },
            {
              "name": "sidebarOpen"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "fluidTranslate"
            },
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "dataItems"
            },
            {
              "name": "rangeIndicatorTemplate"
            },
            {
              "name": "itemsPerPageTemplate"
            },
            {
              "name": "currentPage"
            },
            {
              "name": "itemsPerPageOptions"
            },
            {
              "name": "showFirstButton"
            },
            {
              "name": "showLastButton"
            },
            {
              "name": "isTotalItemsDisabled"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "fluidTranslate"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "theme"
            },
            {
              "name": "chartId"
            },
            {
              "name": "chartTitle"
            },
            {
              "name": "chartData"
            },
            {
              "name": "chartLabels"
            },
            {
              "name": "chartHoverData"
            },
            {
              "name": "hasBackground"
            },
            {
              "name": "hasDataLabels"
            },
            {
              "name": "legendFontTextSize"
            },
            {
              "name": "legendOrientation"
            },
            {
              "name": "hasLegend"
            },
            {
              "name": "titleFontTextSize"
            },
            {
              "name": "tooltipFontTextSize"
            },
            {
              "name": "chartHeight"
            },
            {
              "name": "chartWidth"
            },
            {
              "name": "chartType"
            },
            {
              "name": "colorOverride"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "header"
            },
            {
              "name": "placement"
            },
            {
              "name": "width"
            },
            {
              "name": "hoverOpenDelay"
            },
            {
              "name": "hoverCloseDelay"
            },
            {
              "name": "asWrapper"
            },
            {
              "name": "open"
            },
            {
              "name": "disableInteraction"
            },
            {
              "name": "message"
            },
            {
              "name": "preventPopoverOpening"
            },
            {
              "name": "persistable"
            },
            {
              "name": "ignoreClippingBoundaries"
            },
            {
              "name": "config"
            },
            {
              "name": "parentContainer"
            },
            {
              "name": "zIndex"
            },
            {
              "name": "fluidTranslate"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "controlName"
            },
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "label"
            },
            {
              "name": "labelTextOverflow"
            },
            {
              "name": "placeholder"
            },
            {
              "name": "disabled"
            },
            {
              "name": "initialValue"
            },
            {
              "name": "validation"
            },
            {
              "name": "supplementaryLabel"
            },
            {
              "name": "options"
            },
            {
              "name": "maxWidthPx"
            },
            {
              "name": "maxWidthPercent"
            },
            {
              "name": "inlineField"
            },
            {
              "name": "helpText"
            },
            {
              "name": "inlineQuestion"
            },
            {
              "name": "questionWidth"
            },
            {
              "name": "bordered"
            },
            {
              "name": "verticalLayout"
            },
            {
              "name": "verticalAlignment"
            },
            {
              "name": "selectorType"
            },
            {
              "name": "autoFocus"
            },
            {
              "name": "config"
            },
            {
              "name": "_standalone"
            },
            {
              "name": "parentState"
            },
            {
              "name": "autoValidateChildren"
            },
            {
              "name": "externalState"
            },
            {
              "name": "fluidTranslate"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "fluidTranslate"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "theme"
            },
            {
              "name": "defaultWidth"
            },
            {
              "name": "chartData"
            },
            {
              "name": "chartTypes"
            },
            {
              "name": "chartLabels"
            },
            {
              "name": "currencySymbol"
            },
            {
              "name": "currencyLocale"
            },
            {
              "name": "currencyOptions"
            },
            {
              "name": "primaryBackgroundColor"
            },
            {
              "name": "primaryTextColor"
            },
            {
              "name": "secondaryBackgroundColor"
            },
            {
              "name": "secondaryTextColor"
            },
            {
              "name": "defaultBackgroundColor"
            },
            {
              "name": "defaultTextColor"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "controlName"
            },
            {
              "name": "value"
            },
            {
              "name": "validation"
            },
            {
              "name": "label"
            },
            {
              "name": "disabled"
            },
            {
              "name": "readonly"
            },
            {
              "name": "inlineField"
            },
            {
              "name": "initialValue"
            },
            {
              "name": "max"
            },
            {
              "name": "bordered"
            },
            {
              "name": "allowCancel"
            },
            {
              "name": "iconSize"
            },
            {
              "name": "helpText"
            },
            {
              "name": "fluidTranslate"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "theme"
            },
            {
              "name": "searchOptions"
            },
            {
              "name": "searchTerm"
            },
            {
              "name": "fluidTranslate"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "theme"
            },
            {
              "name": "sectionTitle"
            },
            {
              "name": "titleLevel"
            },
            {
              "name": "disableGutters"
            },
            {
              "name": "infoPopover"
            },
            {
              "name": "fluidTranslate"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "fluidTranslate"
            },
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "controlName"
            },
            {
              "name": "options"
            },
            {
              "name": "initialValue"
            },
            {
              "name": "value"
            },
            {
              "name": "label"
            },
            {
              "name": "labelTextOverflow"
            },
            {
              "name": "supplementaryLabel"
            },
            {
              "name": "disabled"
            },
            {
              "name": "readonly"
            },
            {
              "name": "validation"
            },
            {
              "name": "placeholder"
            },
            {
              "name": "inlineField"
            },
            {
              "name": "allowCancel"
            },
            {
              "name": "helpText"
            },
            {
              "name": "autoFocus"
            },
            {
              "name": "config"
            },
            {
              "name": "_standalone"
            },
            {
              "name": "analyticsConfig"
            },
            {
              "name": "parentState"
            },
            {
              "name": "autoValidateChildren"
            },
            {
              "name": "externalState"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "visible"
            },
            {
              "name": "fixed"
            },
            {
              "name": "collapsible"
            },
            {
              "name": "anchor"
            },
            {
              "name": "treeMenuConfig"
            },
            {
              "name": "menuItems"
            },
            {
              "name": "toggleButtonAriaLabel"
            },
            {
              "name": "config"
            },
            {
              "name": "displayDensity"
            },
            {
              "name": "zIndex"
            },
            {
              "name": "fluidTranslate"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "fluidTranslate"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "theme"
            },
            {
              "name": "chartId"
            },
            {
              "name": "chartTitle"
            },
            {
              "name": "subTitle"
            },
            {
              "name": "chartData"
            },
            {
              "name": "chartLabels"
            },
            {
              "name": "chartHoverData"
            },
            {
              "name": "currencySymbol"
            },
            {
              "name": "hasBackground"
            },
            {
              "name": "label"
            },
            {
              "name": "legendLabels"
            },
            {
              "name": "legendPosition"
            },
            {
              "name": "legendOrientation"
            },
            {
              "name": "hasLegend"
            },
            {
              "name": "colorOverride"
            },
            {
              "name": "barPercentage"
            },
            {
              "name": "categoryPercentage"
            },
            {
              "name": "removeSectionLabels"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "fluidTranslate"
            },
            {
              "name": "stepTitle"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "theme"
            },
            {
              "name": "active"
            },
            {
              "name": "status"
            },
            {
              "name": "disabled"
            },
            {
              "name": "stepHidden"
            },
            {
              "name": "iconStatusComplete"
            },
            {
              "name": "iconStatusSuccess"
            },
            {
              "name": "iconStatusError"
            },
            {
              "name": "iconStatusWarning"
            },
            {
              "name": "iconStatusInfo"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "fluidTranslate"
            },
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "debounceChange"
            },
            {
              "name": "disableNavigationArrows"
            },
            {
              "name": "nonLinear"
            },
            {
              "name": "stepLabelPosition"
            },
            {
              "name": "actionsPosition"
            },
            {
              "name": "alignSteps"
            },
            {
              "name": "stepWidth"
            },
            {
              "name": "hideControls"
            },
            {
              "name": "showFinishButton"
            },
            {
              "name": "completeMessage"
            },
            {
              "name": "nextLabel"
            },
            {
              "name": "backLabel"
            },
            {
              "name": "finishLabel"
            },
            {
              "name": "resetLabel"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "label"
            },
            {
              "name": "type"
            },
            {
              "name": "removeMargin"
            },
            {
              "name": "removeHorizontalMargin"
            },
            {
              "name": "removeVerticalMargin"
            },
            {
              "name": "popoverConfig"
            },
            {
              "name": "small"
            },
            {
              "name": "controlBarPosition"
            },
            {
              "name": "iconBefore"
            },
            {
              "name": "iconAfter"
            },
            {
              "name": "verticalPlacement"
            },
            {
              "name": "disabled"
            },
            {
              "name": "fluidTranslate"
            },
            {
              "name": "zIndex"
            },
            {
              "name": "color"
            },
            {
              "name": "popover"
            },
            {
              "name": "popoverPlacement"
            },
            {
              "name": "popoverTitle"
            },
            {
              "name": "popoverWidth"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "tabTitle"
            },
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "active"
            },
            {
              "name": "iconBefore"
            },
            {
              "name": "iconAfter"
            },
            {
              "name": "disabled"
            },
            {
              "name": "hidden"
            },
            {
              "name": "_iconBefore"
            },
            {
              "name": "_iconAfter"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "showArrows"
            },
            {
              "name": "scrollPosition"
            },
            {
              "name": "maxScrollPosition"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "dataItems"
            },
            {
              "name": "headers"
            },
            {
              "name": "columnGroups"
            },
            {
              "name": "tableId"
            },
            {
              "name": "enableSearch"
            },
            {
              "name": "disableActiveFiltering"
            },
            {
              "name": "exportOptions"
            },
            {
              "name": "searchOptions"
            },
            {
              "name": "stateful"
            },
            {
              "name": "expandableRowTemplate"
            },
            {
              "name": "rowSubset"
            },
            {
              "name": "expandedButtonPosition"
            },
            {
              "name": "useRenderer"
            },
            {
              "name": "maxHeight"
            },
            {
              "name": "minHeight"
            },
            {
              "name": "stickyHeaders"
            },
            {
              "name": "dataLoading"
            },
            {
              "name": "refreshDelay"
            },
            {
              "name": "emptyStateConfig"
            },
            {
              "name": "allowOverflow"
            },
            {
              "name": "trackFormState"
            },
            {
              "name": "rowActions"
            },
            {
              "name": "tableActions"
            },
            {
              "name": "columnAdjustments"
            },
            {
              "name": "formActionsConfig"
            },
            {
              "name": "expandableForm"
            },
            {
              "name": "selectionOptions"
            },
            {
              "name": "striped"
            },
            {
              "name": "rowBorders"
            },
            {
              "name": "disableColumnVisibility"
            },
            {
              "name": "columnVisibilityButtonConfig"
            },
            {
              "name": "handleDelete"
            },
            {
              "name": "commitOnValidSave"
            },
            {
              "name": "validateOnSave"
            },
            {
              "name": "actionsDisabled"
            },
            {
              "name": "rowIdentifier"
            },
            {
              "name": "retainTransientProperties"
            },
            {
              "name": "highlightRowIf"
            },
            {
              "name": "disableRowIf"
            },
            {
              "name": "disabled"
            },
            {
              "name": "paginated"
            },
            {
              "name": "paginationItemsPerPageOptions"
            },
            {
              "name": "rangeIndicatorTemplate"
            },
            {
              "name": "itemsPerPageTemplate"
            },
            {
              "name": "allowTabIndexRows"
            },
            {
              "name": "allowTabIndexCells"
            },
            {
              "name": "isPaginatorTotalItemsDisabled"
            },
            {
              "name": "inline"
            },
            {
              "name": "enableDeleteAll"
            },
            {
              "name": "externalState"
            },
            {
              "name": "serverMode"
            },
            {
              "name": "showEditActions"
            },
            {
              "name": "editActionsPlacement"
            },
            {
              "name": "selectable"
            },
            {
              "name": "selectableHeaderLabel"
            },
            {
              "name": "selectableDataPath"
            },
            {
              "name": "analyticsConfig"
            },
            {
              "name": "fluidTranslate"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "fluidTranslate"
            },
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "tabCanChange"
            },
            {
              "name": "debounceChange"
            },
            {
              "name": "disableNavigationArrows"
            },
            {
              "name": "verticalLayout"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "fluidTranslate"
            },
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "strong"
            },
            {
              "name": "inline"
            },
            {
              "name": "alignSuper"
            },
            {
              "name": "block"
            },
            {
              "name": "italics"
            },
            {
              "name": "center"
            },
            {
              "name": "muted"
            },
            {
              "name": "disableGutters"
            },
            {
              "name": "disablePadding"
            },
            {
              "name": "disableGutter"
            },
            {
              "name": "color"
            },
            {
              "name": "align"
            },
            {
              "name": "preserveSpacing"
            },
            {
              "name": "small"
            },
            {
              "name": "breakWord"
            },
            {
              "name": "textOverflow"
            },
            {
              "name": "wrap"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "fluidTranslate"
            },
            {
              "name": "controlName"
            },
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "autoResize"
            },
            {
              "name": "label"
            },
            {
              "name": "labelTextOverflow"
            },
            {
              "name": "placeholder"
            },
            {
              "name": "inlineField"
            },
            {
              "name": "allowCancel"
            },
            {
              "name": "initialValue"
            },
            {
              "name": "maxLength"
            },
            {
              "name": "disableCharacterCount"
            },
            {
              "name": "value"
            },
            {
              "name": "disabled"
            },
            {
              "name": "readonly"
            },
            {
              "name": "validation"
            },
            {
              "name": "supplementaryLabel"
            },
            {
              "name": "rows"
            },
            {
              "name": "maskingConfig"
            },
            {
              "name": "helpText"
            },
            {
              "name": "autoFocus"
            },
            {
              "name": "updateStrategy"
            },
            {
              "name": "config"
            },
            {
              "name": "_standalone"
            },
            {
              "name": "parentState"
            },
            {
              "name": "autoValidateChildren"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "theme"
            },
            {
              "name": "themePalette"
            },
            {
              "name": "baseZIndex"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "fluidTranslate"
            },
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "level"
            },
            {
              "name": "disableGutters"
            },
            {
              "name": "color"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "fluidTranslate"
            },
            {
              "name": "controlName"
            },
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "label"
            },
            {
              "name": "labelTextOverflow"
            },
            {
              "name": "disabled"
            },
            {
              "name": "initialValue"
            },
            {
              "name": "toggled"
            },
            {
              "name": "validation"
            },
            {
              "name": "inlineField"
            },
            {
              "name": "toggleType"
            },
            {
              "name": "helpText"
            },
            {
              "name": "customToggleConfig"
            },
            {
              "name": "textToggleConfig"
            },
            {
              "name": "labelAlignment"
            },
            {
              "name": "labelOn"
            },
            {
              "name": "labelOff"
            },
            {
              "name": "autoFocus"
            },
            {
              "name": "config"
            },
            {
              "name": "asMenuItem"
            },
            {
              "name": "removePadding"
            },
            {
              "name": "_standalone"
            },
            {
              "name": "parentState"
            },
            {
              "name": "autoValidateChildren"
            },
            {
              "name": "externalState"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "fluidTranslate"
            },
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "toggleOptions"
            },
            {
              "name": "toggleAllLabel"
            },
            {
              "name": "toggleAllValue"
            },
            {
              "name": "toggleAllType"
            },
            {
              "name": "horizontalLayout"
            },
            {
              "name": "disabled"
            },
            {
              "name": "asMenuSection"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "theme"
            },
            {
              "name": "steps"
            },
            {
              "name": "globalScrollOffset"
            },
            {
              "name": "zIndex"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "fluidTranslate"
            },
            {
              "name": "theme"
            },
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "menuItems"
            },
            {
              "name": "displayDensity"
            },
            {
              "name": "textOverflow"
            },
            {
              "name": "selectableSubmenuButtons"
            },
            {
              "name": "collapsibleSubmenus"
            },
            {
              "name": "menuType"
            },
            {
              "name": "config"
            },
            {
              "name": "sidebarMenu"
            }
          ]
        },
        {
          "properties": [
            {
              "name": "overrideGlobalTheme"
            },
            {
              "name": "theme"
            },
            {
              "name": "vegaSpec"
            },
            {
              "name": "vegaData"
            },
            {
              "name": "vegaRenderer"
            },
            {
              "name": "inputsLayout"
            }
          ]
        },
        {
          "properties": []
        }
      ]
    }
  }
}